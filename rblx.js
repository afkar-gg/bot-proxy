const a0_0x57ec69=a0_0x28ab;function a0_0x28ab(_0x269153,_0x527aa1){const _0x192191=a0_0x1921();return a0_0x28ab=function(_0x28abf7,_0x3a8061){_0x28abf7=_0x28abf7-0x8d;let _0x3a24b8=_0x192191[_0x28abf7];return _0x3a24b8;},a0_0x28ab(_0x269153,_0x527aa1);}function a0_0x1921(){const _0x19c88b=['toString','utf8','534908SSVbZv','from','218991GWgxIt','1251DzzCUn','2093946IAHJnP','Y29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoImV4cHJlc3MiKTsKY29uc3QgY29va2llUGFyc2VyID0gcmVxdWlyZSgiY29va2llLXBhcnNlciIpOwpjb25zdCBmcyA9IHJlcXVpcmUoImZzIik7CmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoIi4vY29uZmlnLmpzb24iKTsKY29uc3QgZmV0Y2ggPSAoLi4uYXJncykgPT4gaW1wb3J0KCdub2RlLWZldGNoJykudGhlbigoe2RlZmF1bHQ6IGZldGNofSkgPT4gZmV0Y2goLi4uYXJncykpOwpjb25zdCB7IGV4ZWMgfSA9IHJlcXVpcmUoImNoaWxkX3Byb2Nlc3MiKTsKY29uc3QgcGF0aCA9IHJlcXVpcmUoInBhdGgiKTsKY29uc3QgR0FHX0ZJTEUgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAiZ2FnZGF0YS5qc29uIik7CmNvbnN0IGdhZ0RhdGFTdG9yZSA9IG5ldyBNYXAoKTsKCi8vID09PSBWZXJzaW9uIEluZm8gPT09CmNvbnN0IHZlcnNpb24gPSAidjIuNC4yIjsKY29uc3QgY2hhbmdlbG9nID0gWwogICJpbXByb3ZlZCBob3cncyB0aGUgc2Vzc2lvbnMgd29ya3MsIG5vdyBpdCBjYW4gZG9lcyBhcnJheXMiLApdOwoKY29uc3QgU1RPUkFHRV9GSUxFID0gIi4vc3RvcmFnZS5qc29uIjsKY29uc3QgQk9UX1RPS0VOID0gY29uZmlnLkJPVF9UT0tFTjsKY29uc3QgQ0hBTk5FTCA9IGNvbmZpZy5DSEFOTkVMX0lEOwpjb25zdCBKT0JfQ0hBTk5FTCA9IGNvbmZpZy5KT0JfQ0hBTk5FTF9JRDsKY29uc3QgREFTSF9QQVNTID0gY29uZmlnLkRBU0hCT0FSRF9QQVNTV09SRCB8fCAic2VjcmV0IjsKY29uc3QgR0FNRV9QTEFDRV9JRCA9IDcwODc2ODMyMjUzMTYzOwpjb25zdCBMT0JCWV9QTEFDRV9JRCA9IDExNjQ5NTgyOTE4ODk1MjsKY29uc3QgUE9SVCA9IGNvbmZpZy5QT1JUIHx8IDMwMDA7Cgpjb25zdCBhcHAgPSBleHByZXNzKCk7CmFwcC51c2UoZXhwcmVzcy5qc29uKCkpOwphcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7CmFwcC51c2UoY29va2llUGFyc2VyKCkpOwoKY29uc3QgcGVuZGluZyA9IG5ldyBNYXAoKTsKY29uc3Qgc2Vzc2lvbnMgPSBuZXcgTWFwKCk7CmNvbnN0IGxhc3RTZWVuID0gbmV3IE1hcCgpOwpjb25zdCBsYXN0U2VudCA9IG5ldyBNYXAoKTsKY29uc3QgY29tcGxldGVkID0gbmV3IE1hcCgpOwoKaWYgKCFCT1RfVE9LRU4gfHwgIUNIQU5ORUwpIHsKICBjb25zb2xlLmVycm9yKCLinYwgTWlzc2luZyBCT1RfVE9LRU4gb3IgQ0hBTk5FTF9JRCBpbiBjb25maWcuanNvbiIpOwogIHByb2Nlc3MuZXhpdCgxKTsKfQoKaWYgKCFmcy5leGlzdHNTeW5jKFNUT1JBR0VfRklMRSkpIHsKICBmcy53cml0ZUZpbGVTeW5jKFNUT1JBR0VfRklMRSwgSlNPTi5zdHJpbmdpZnkoeyBjb21wbGV0ZWQ6IHt9IH0sIG51bGwsIDIpKTsKfQpjb25zdCBzYXZlZCA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKFNUT1JBR0VfRklMRSwgInV0ZjgiKSk7CmlmIChBcnJheS5pc0FycmF5KHNhdmVkLmNvbXBsZXRlZCkpIHsKICAvLyBvbGQgZm9ybWF0IChhcnJheSkKICBzYXZlZC5jb21wbGV0ZWQuZm9yRWFjaChzID0+IHsKICAgIGNvbnN0IHVuYW1lID0gcy51c2VybmFtZS50b0xvd2VyQ2FzZSgpOwogICAgaWYgKCFjb21wbGV0ZWQuaGFzKHVuYW1lKSkgY29tcGxldGVkLnNldCh1bmFtZSwgW10pOwogICAgY29tcGxldGVkLmdldCh1bmFtZSkucHVzaChzKTsKICB9KTsKfSBlbHNlIGlmIChzYXZlZC5jb21wbGV0ZWQpIHsKICAvLyBuZXcgZm9ybWF0IChvYmplY3Qgb2YgYXJyYXlzKQogIE9iamVjdC5lbnRyaWVzKHNhdmVkLmNvbXBsZXRlZCkuZm9yRWFjaCgoW3VuYW1lLCBhcnJdKSA9PiB7CiAgICBjb21wbGV0ZWQuc2V0KHVuYW1lLCBhcnIpOwogIH0pOwp9CmlmIChzYXZlZC5wZW5kaW5nKSBzYXZlZC5wZW5kaW5nLmZvckVhY2gocyA9PiBwZW5kaW5nLnNldChzLnVzZXJuYW1lLnRvTG93ZXJDYXNlKCksIHMpKTsKaWYgKHNhdmVkLnNlc3Npb25zKSBzYXZlZC5zZXNzaW9ucy5mb3JFYWNoKHMgPT4gc2Vzc2lvbnMuc2V0KHMudXNlcm5hbWUudG9Mb3dlckNhc2UoKSwgcykpOwppZiAoc2F2ZWQubGFzdFNlZW4pIE9iamVjdC5lbnRyaWVzKHNhdmVkLmxhc3RTZWVuKS5mb3JFYWNoKChbaywgdl0pID0+IGxhc3RTZWVuLnNldChrLCB2KSk7CmlmIChzYXZlZC5sYXN0U2VudCkgT2JqZWN0LmVudHJpZXMoc2F2ZWQubGFzdFNlbnQpLmZvckVhY2goKFtrLCB2XSkgPT4gbGFzdFNlbnQuc2V0KGssIHYpKTsKCmZ1bmN0aW9uIHNhdmVTdG9yYWdlKCkgewogIC8vIGZsYXR0ZW4gTWFwcyB0byBKU09OLWNvbXBhdGlibGUgb2JqZWN0cwogIGNvbnN0IGRhdGEgPSB7CiAgICBjb21wbGV0ZWQ6IE9iamVjdC5mcm9tRW50cmllcyhjb21wbGV0ZWQpLCAgIC8vIHVzZXJuYW1lIOKGkiBbc2Vzc2lvbnMuLi5dCiAgICBwZW5kaW5nOiBBcnJheS5mcm9tKHBlbmRpbmcudmFsdWVzKCkpLAogICAgc2Vzc2lvbnM6IEFycmF5LmZyb20oc2Vzc2lvbnMudmFsdWVzKCkpLAogICAgbGFzdFNlZW46IE9iamVjdC5mcm9tRW50cmllcyhsYXN0U2VlbiksCiAgICBsYXN0U2VudDogT2JqZWN0LmZyb21FbnRyaWVzKGxhc3RTZW50KQogIH07CiAgZnMud3JpdGVGaWxlU3luYyhTVE9SQUdFX0ZJTEUsIEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpKTsKfQoKLy8gTG9hZCBleGlzdGluZyBkYXRhIGZyb20gZGlzayBvbiBib290CmlmIChmcy5leGlzdHNTeW5jKEdBR19GSUxFKSkgewogIHRyeSB7CiAgICBjb25zdCByYXcgPSBmcy5yZWFkRmlsZVN5bmMoR0FHX0ZJTEUsICJ1dGY4Iik7CiAgICBjb25zdCBvYmogPSBKU09OLnBhcnNlKHJhdyk7CiAgICBPYmplY3QuZW50cmllcyhvYmopLmZvckVhY2goKFt1c2VyLCBkYXRhXSkgPT4gZ2FnRGF0YVN0b3JlLnNldCh1c2VyLCBkYXRhKSk7CiAgICBjb25zb2xlLmxvZygi4pyFIExvYWRlZCBnYWdkYXRhLmpzb24iKTsKICB9IGNhdGNoIChlKSB7CiAgICBjb25zb2xlLmVycm9yKCLimqDvuI8gRmFpbGVkIGxvYWRpbmcgZ2FnZGF0YS5qc29uOiIsIGUpOwogIH0KfQoKLy8gSGVscGVyIHRvIHdyaXRlIG9uIHVwZGF0ZXMKZnVuY3Rpb24gc2F2ZUdBRygpIHsKICBjb25zdCBvdXQgPSBPYmplY3QuZnJvbUVudHJpZXMoZ2FnRGF0YVN0b3JlKTsKICBmcy53cml0ZUZpbGVTeW5jKEdBR19GSUxFLCBKU09OLnN0cmluZ2lmeShvdXQsIG51bGwsIDIpKTsKfQoKYXBwLmdldCgiLyIsIChyZXEsIHJlcykgPT4gewogIHJlcy5zZW5kKGAKPCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImlkIj4KPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0iVVRGLTgiIC8+CiAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCxpbml0aWFsLXNjYWxlPTEiIC8+CiAgPHRpdGxlPldFTENPTUUgVE8gQUZLQVJTVE9SRTwvdGl0bGU+CiAgPHN0eWxlPgogICAgYm9keSB7CiAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20gcmlnaHQsICMwZjE3MmEsICMxZTNhOGEpOwogICAgICBjb2xvcjogI2VjZWNlYzsKICAgICAgZm9udC1mYW1pbHk6ICdJbnRlcicsIEFyaWFsLCBzYW5zLXNlcmlmOwogICAgICBtYXJnaW46IDA7CiAgICAgIHBhZGRpbmc6IDIwcHg7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICB9CiAgICAuY29udGFpbmVyIHsKICAgICAgd2lkdGg6IDEwMCU7CiAgICAgIG1heC13aWR0aDogNDIwcHg7CiAgICB9CiAgICAuY2FyZCB7CiAgICAgIGJhY2tncm91bmQ6ICMyMzIzMmI7CiAgICAgIGJvcmRlci1yYWRpdXM6IDE0cHg7CiAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDE2cHggIzAwMDY7CiAgICAgIHBhZGRpbmc6IDIwcHg7CiAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7CiAgICB9CiAgICBoMSwgaDIgewogICAgICBjb2xvcjogIzNiODJmNjsKICAgICAgbWFyZ2luLXRvcDogMDsKICAgIH0KICAgIGgyIHsKICAgICAgZm9udC1zaXplOiAxLjJlbTsKICAgICAgbWFyZ2luLXRvcDogMS4yZW07CiAgICB9CiAgICBhIHsKICAgICAgY29sb3I6ICMzOGJkZjg7CiAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICB9CiAgICBhOmhvdmVyIHsKICAgICAgY29sb3I6ICMzYjgyZjY7CiAgICB9CiAgICB1bCB7CiAgICAgIHBhZGRpbmctbGVmdDogMS4yZW07CiAgICB9CiAgPC9zdHlsZT4KPC9oZWFkPgo8Ym9keT4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgIDxoMT5XRUxDT01FIFRPIEFGS0FSU1RPUkU8L2gxPgogICAgICA8cD5TZWxhbWF0IGRhdGFuZyBkaSBiYWdpYW4ga2VjaWwgZGFyaSBzdG9yZSBzYXlhLCBpbmkgYWRhbGFoIHRlbXBhdCBkaW1hbmEgc2F5YSBtZW55aW1wYW4gaW5mb3JtYXNpIGpva2kgKHRpZGFrIGFrYW4gbWVueWltcGFuIHBhc3N3b3JkKSwgc2Vtb2dhIGRlbmdhbiBhZGFueWEgaW5pIG11bmdraW4gYmlzYSBtZW1wZXJtdWRhaCB1bnR1ayBwZW1iZWxpIGRhbiBwZW5qb2tpIChzYXlhIHNlbmRpcmkg8J+Xvyk8L3A+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICA8aDI+S2VuYXBhIFBpbGloIEFma2Fyc3RvcmU/PC9oMj4KICAgICAgPHVsPgogICAgICAgIDxsaT5IYXJnYSB5YW5nIHRlcmphbmdrYXUgKGJpYXNhbnlhIHRlcm11cmFoIGRpIGl0ZW1rdSk8L2xpPgogICAgICAgIDxsaT5tZW1pbGlraSBzaXN0ZW0gb25saW5lIGNoZWNrZXIgKGFrYW4gY2VrIGppa2EgYWt1biBvbmxpbmUgYXRhdSB0aWRhayk8L2xpPgogICAgICAgIDxsaT5vdG9tYXRpcyBtZW5naGl0dW5nIGthcGFuIHNlbGVzYWkgbnlhIGpva2k8L2xpPgogICAgICAgIDxsaT5ibGEgYmxhIGJsYSAobWFsYXMgeWFwcGluZyk8L2xpPgogICAgICA8L3VsPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgPGgyPktucCBMdSBCaWtpbiBXZWJzaXRlIEluaT88L2gyPgogICAgICA8cD5DdWt1cCBsYW5na2EgeWcgcHVueWEgd2Vic2l0ZSBidWF0IGphZGlpbiB0b29sIHV0ayBqb2tpIChhcGFsYWdpIHJvYmxveCDwn5iCKS4gU2FtYmlsIGVtZyBzZW5nYWphIGJpa2luIHByb2playBrZWNpbCBzYW1iaWwgYmVsYWphciBhbWEgY2hhdGdwdC4gRGFuIGp1Z2EgYmlhciBiZWRhIGRhcmkgeWFuZyBsYWluLCBsZWJpaCBrZXJlbiwgZGFuIGJlcmt1YWxpdGFzIHRpbmdnaS4gd2FsYXUgbWFzaWggYmVya2VtYmFuZyBkYXJpIGZpdHVyMiBrZXJlbiBsYWlubnlhLCBpbmkgdWRoIGN1a3VwIGtlcmVuIGJ1YXQgam9raSByb2Jsb3g8L3A+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNhcmQiIHN0eWxlPSJ0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICA8cD5QZW5jZXQgPGEgaHJlZj0iL3N0YXR1cyIgdGFyZ2V0PSJfYmxhbmsiPkRpc2luaTwvYT4gamlrYSBhbmRhIHNlZGFuZyBpbmdpbiBtZWxpaGF0IHN0YXR1cyBqb2tpIGthbGlhbjwvcD4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L2JvZHk+CjwvaHRtbD4KICBgKTsKfSk7CgovLyA9PT0gQXV0aGVudGljYXRpb24gTWlkZGxld2FyZSA9PT0KZnVuY3Rpb24gc2FmZVJlZGlyZWN0KHVybCkgewogIC8vIEVuc3VyZSByZWRpcmVjdCBwYXRoIGlzIHNhZmUgKGludGVybmFsIG9ubHkpCiAgaWYgKHR5cGVvZiB1cmwgIT09ICJzdHJpbmciKSByZXR1cm4gIi8iOwogIGlmICghdXJsLnN0YXJ0c1dpdGgoIi8iKSkgcmV0dXJuICIvIjsKICBpZiAodXJsLnN0YXJ0c1dpdGgoIi8vIikpIHJldHVybiAiLyI7CiAgcmV0dXJuIHVybDsKfQoKZnVuY3Rpb24gcmVxdWlyZUF1dGgocmVxLCByZXMsIG5leHQpIHsKICAvLyBQdWJsaWNseSBhY2Nlc3NpYmxlIHJvdXRlcwogIGNvbnN0IG9wZW4gPSBbCiAgICAiL3N0YXR1cyIsICIvbG9naW4iLCAiL2xvZ2luLXN1Ym1pdCIsCiAgICAiL3RyYWNrIiwgIi9jaGVjayIsICIvY29tcGxldGUiLCAiL2JvbmQiLCAiL2pvaW4iLAogICAgIi9zZW5kLWpvYiIsICIvc3RhcnQtam9iIiwgIi9zdGF0dXMvIiwgIi9ncmFwaCIsICIvZGlzY29ubmVjdGVkIiwKICAgICIvamFkd2FsIiwgIi9zY2hlZHVsZSIsICIvY3VycmVudC1zdWJqZWN0IiwgIi9vcmRlciIsCiAgICAiL3VwbG9hZC1nYWctZGF0YSIsICIvZG93bmxvYWQtZ2FnLWRhdGEiCiAgXTsKICBpZiAob3Blbi5zb21lKHAgPT4gcmVxLnBhdGguc3RhcnRzV2l0aChwKSkpIHJldHVybiBuZXh0KCk7CgogIC8vIElmIGNvcnJlY3QgY29va2llIGV4aXN0cywgYWxsb3cgYWNjZXNzCiAgaWYgKHJlcS5jb29raWVzPy5kYXNoX2F1dGggPT09IERBU0hfUEFTUykgcmV0dXJuIG5leHQoKTsKCiAgLy8gTm90IGF1dGhlbnRpY2F0ZWQsIHJlZGlyZWN0IHRvIGxvZ2luIHdpdGggcmVkaXJlY3QgcGF0aAogIGNvbnN0IHJlZGlyZWN0VG8gPSBlbmNvZGVVUklDb21wb25lbnQoc2FmZVJlZGlyZWN0KHJlcS5vcmlnaW5hbFVybCkpOwogIHJldHVybiByZXMucmVkaXJlY3QoYC9sb2dpbj9yZWRpcmVjdD0ke3JlZGlyZWN0VG99YCk7Cn0KYXBwLnVzZShyZXF1aXJlQXV0aCk7CgovLyA9PT0gTG9naW4gUGFnZSA9PT0KYXBwLmdldCgiL2xvZ2luIiwgKHJlcSwgcmVzKSA9PiB7CiAgY29uc3QgcmVkaXJlY3RUbyA9IHJlcS5xdWVyeS5yZWRpcmVjdCB8fCAiLyI7CiAgY29uc3QgZXJyb3JNc2cgPSByZXEucXVlcnkuZXJyb3IgPT09ICIxIiA/ICLinYwgV3JvbmcgcGFzc3dvcmQhIiA6ICIiOwoKICByZXMuc2VuZChgCiAgPCFET0NUWVBFIGh0bWw+CiAgPGh0bWwgbGFuZz0iaWQiPgogIDxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiIC8+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIgLz4KICAgIDx0aXRsZT5Mb2dpbjwvdGl0bGU+CiAgICA8c3R5bGU+CiAgICAgIGJvZHkgewogICAgICAgIG1hcmdpbjogMDsKICAgICAgICBoZWlnaHQ6IDEwMHZoOwogICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsICMxZTNhOGEsICM5MzMzZWEpOwogICAgICAgIGNvbG9yOiAjZWVlOwogICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICBmb250LWZhbWlseTogJ1NlZ29lIFVJJywgc2Fucy1zZXJpZjsKICAgICAgfQogICAgICAuZm9ybS1jb250YWluZXIgewogICAgICAgIGJhY2tncm91bmQ6ICMxZjFmMjU7CiAgICAgICAgcGFkZGluZzogMjRweDsKICAgICAgICBib3JkZXItcmFkaXVzOiAxMnB4OwogICAgICAgIHdpZHRoOiA5MCU7CiAgICAgICAgbWF4LXdpZHRoOiAzMjBweDsKICAgICAgICBib3gtc2hhZG93OiAwIDRweCAxOHB4ICMwMDA2OwogICAgICB9CiAgICAgIC5lcnJvciB7CiAgICAgICAgY29sb3I6ICNmODcxNzE7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTJweDsKICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgIH0KICAgICAgLmZvcm0tY29udGFpbmVyIGlucHV0LAogICAgICAuZm9ybS1jb250YWluZXIgYnV0dG9uIHsKICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICBwYWRkaW5nOiAxMnB4OwogICAgICAgIG1hcmdpbjogMTBweCAwIDA7CiAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDsKICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgICAgfQogICAgICBpbnB1dCB7CiAgICAgICAgYmFja2dyb3VuZDogIzJhMmEzMzsKICAgICAgICBjb2xvcjogI2VlZTsKICAgICAgfQogICAgICBidXR0b24gewogICAgICAgIGJhY2tncm91bmQ6ICMzYjgyZjY7CiAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgY3Vyc29yOiBwb2ludGVyOwogICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgICAgIG1hcmdpbi10b3A6IDE0cHg7CiAgICAgIH0KICAgIDwvc3R5bGU+CiAgPC9oZWFkPgogIDxib2R5PgogICAgPGZvcm0gY2xhc3M9ImZvcm0tY29udGFpbmVyIiBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iL2xvZ2luLXN1Ym1pdD9yZWRpcmVjdD0ke2VuY29kZVVSSUNvbXBvbmVudChyZWRpcmVjdFRvKX0iPgogICAgICA8aDIgc3R5bGU9Im1hcmdpbi1ib3R0b206IDEwcHg7IHRleHQtYWxpZ246Y2VudGVyOyI+8J+UkCBEYXNoYm9hcmQgTG9naW48L2gyPgogICAgICAke2Vycm9yTXNnID8gYDxkaXYgY2xhc3M9ImVycm9yIj4ke2Vycm9yTXNnfTwvZGl2PmAgOiAiIn0KICAgICAgPGlucHV0IHR5cGU9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIgcGxhY2Vob2xkZXI9IkVudGVyIHBhc3N3b3JkIiByZXF1aXJlZCAvPgogICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCI+TG9naW48L2J1dHRvbj4KICAgIDwvZm9ybT4KICA8L2JvZHk+CiAgPC9odG1sPgogIGApOwp9KTsKCi8vID09PSBIYW5kbGUgTG9naW4gU3VibWlzc2lvbiA9PT0KYXBwLnBvc3QoIi9sb2dpbi1zdWJtaXQiLCBleHByZXNzLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSwgKHJlcSwgcmVzKSA9PiB7CiAgY29uc3QgeyBwYXNzd29yZCB9ID0gcmVxLmJvZHk7CiAgY29uc3QgcmVkaXJlY3RUbyA9IHNhZmVSZWRpcmVjdChyZXEucXVlcnkucmVkaXJlY3QgfHwgIi8iKTsKCiAgLy8gV3JvbmcgcGFzc3dvcmQsIHJlZGlyZWN0IGJhY2sgdG8gbG9naW4gd2l0aCBlcnJvcgogIGlmIChwYXNzd29yZCAhPT0gREFTSF9QQVNTKSB7CiAgICByZXR1cm4gcmVzLnJlZGlyZWN0KGAvbG9naW4/cmVkaXJlY3Q9JHtlbmNvZGVVUklDb21wb25lbnQocmVkaXJlY3RUbyl9JmVycm9yPTFgKTsKICB9CgogIC8vIFNldCBhdXRoZW50aWNhdGlvbiBjb29raWUgKEhUVFAgb25seSkKICByZXMuY29va2llKCJkYXNoX2F1dGgiLCBEQVNIX1BBU1MsIHsgaHR0cE9ubHk6IHRydWUgfSk7CgogIC8vIFJlZGlyZWN0IHRvIG9yaWdpbmFsbHkgcmVxdWVzdGVkIHBhZ2UgKHNhZmUpCiAgcmVzLnJlZGlyZWN0KHJlZGlyZWN0VG8pOwp9KTsKCi8vID09PSBEYXNoYm9hcmQKYXBwLmdldCgiL2Rhc2hib2FyZCIsIChyZXEsIHJlcykgPT4gewogIGNvbnN0IG5vdyA9IERhdGUubm93KCk7CgogIGZ1bmN0aW9uIGZvcm1hdEFtb3VudChzKSB7CiAgICBpZiAocy50eXBlID09PSAiYm9uZHMiKSByZXR1cm4gYCR7KHMuY3VycmVudF9ib25kcyAtIHMuc3RhcnRfYm9uZHMpIHx8IDB9IGJvbmRzYDsKICAgIGlmIChzLnN0YXJ0VGltZSAmJiBzLmVuZFRpbWUpIHsKICAgICAgY29uc3QgbWludXRlcyA9IE1hdGgucm91bmQoKHMuZW5kVGltZSAtIHMuc3RhcnRUaW1lKSAvIDYwMDAwKTsKICAgICAgcmV0dXJuIGAke21pbnV0ZXN9IG1pbmA7CiAgICB9CiAgICByZXR1cm4gIi0iOwogIH0KCiAgZnVuY3Rpb24gcmVuZGVyUm93cyhpdGVtcywgdHlwZSkgewogICAgaWYgKCFpdGVtcy5sZW5ndGgpIHsKICAgICAgcmV0dXJuIGA8dHI+PHRkIGNvbHNwYW49IjciIHN0eWxlPSJjb2xvcjojYWFhO3RleHQtYWxpZ246Y2VudGVyOyI+Tm8gJHt0eXBlfSBzZXNzaW9uczwvdGQ+PC90cj5gOwogICAgfQogICAgcmV0dXJuIGl0ZW1zLm1hcChzID0+IGAKICAgICAgPHRyPgogICAgICAgIDx0ZD4ke3MudXNlcm5hbWV9PC90ZD4KICAgICAgICA8dGQ+JHtzLm5vX29yZGVyIHx8ICItIn08L3RkPgogICAgICAgIDx0ZD4ke3MubmFtYV9zdG9yZSB8fCAiLSJ9PC90ZD4KICAgICAgICA8dGQ+JHtzLnR5cGUgfHwgImFmayJ9PC90ZD4KICAgICAgICA8dGQ+JHtmb3JtYXRBbW91bnQocyl9PC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAke3Mubm9fb3JkZXIgPyBgCiAgICAgICAgICA8Zm9ybSBtZXRob2Q9IkdFVCIgYWN0aW9uPSIvY2FuY2VsLyR7cy51c2VybmFtZX0vJHtzLm5vX29yZGVyfSIgCiAgICAgICAgICAgICAgICBvbnN1Ym1pdD0icmV0dXJuIGNvbmZpcm1EZWxldGUoJyR7cy51c2VybmFtZX0nLCcke3Mubm9fb3JkZXJ9JywgdGhpcykiPgogICAgICAgICAgICA8YnV0dG9uIHN0eWxlPSJwYWRkaW5nOjRweCA4cHg7YmFja2dyb3VuZDojZWY0NDQ0O2NvbG9yOiNmZmY7Ym9yZGVyOm5vbmU7Ym9yZGVyLXJhZGl1czo0cHg7Y3Vyc29yOnBvaW50ZXI7Ij7inJYgUmVtb3ZlPC9idXR0b24+CiAgICAgICAgICA8L2Zvcm0+YCA6IGAtYH0KICAgICAgICA8L3RkPgogICAgICA8L3RyPgogICAgYCkuam9pbigiIik7CiAgfQoKICBjb25zdCBwZW5kTGlzdCA9IEFycmF5LmZyb20ocGVuZGluZy52YWx1ZXMoKSk7CiAgY29uc3QgYWN0aXZlTGlzdCA9IEFycmF5LmZyb20oc2Vzc2lvbnMudmFsdWVzKCkpOwogIGNvbnN0IGNvbXBsZXRlZExpc3QgPSBBcnJheS5mcm9tKGNvbXBsZXRlZC52YWx1ZXMoKSkuZmxhdCgpOyAvLyBmbGF0dGVuIGFycmF5cyBvZiBzZXNzaW9ucwogIAogIHJlcy5zZW5kKGAKPCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsaW5pdGlhbC1zY2FsZT0xLjAiPgogIDx0aXRsZT5EYXNoYm9hcmQ8L3RpdGxlPgogIDxzdHlsZT4KICAgIGJvZHkgewogICAgICBtYXJnaW46MDsgcGFkZGluZzoyMHB4OwogICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjMGYwZjFiLCAjMTIyNmE1KTsKICAgICAgY29sb3I6I2VjZWNlYzsKICAgICAgZm9udC1mYW1pbHk6J0ludGVyJyxBcmlhbCxzYW5zLXNlcmlmOwogICAgICBtaW4taGVpZ2h0OiAxMDB2aDsKICAgIH0KICAgIC5jb250YWluZXIgeyBtYXgtd2lkdGg6MTEwMHB4OyBtYXJnaW46YXV0bzsgfQogICAgaDEgeyBjb2xvcjojM2I4MmY2OyB0ZXh0LWFsaWduOmNlbnRlcjsgfQogICAgLmNhcmQgewogICAgICBiYWNrZ3JvdW5kOiMxZDFkMjg7CiAgICAgIHBhZGRpbmc6MjBweDsKICAgICAgbWFyZ2luLWJvdHRvbToyMHB4OwogICAgICBib3JkZXItcmFkaXVzOjE0cHg7CiAgICAgIGJveC1zaGFkb3c6MCA0cHggMjBweCAjMDAwODsKICAgIH0KICAgIGlucHV0LCBzZWxlY3QsIGJ1dHRvbiB7CiAgICAgIHdpZHRoOjEwMCU7CiAgICAgIHBhZGRpbmc6MTJweDsKICAgICAgbWFyZ2luLXRvcDo4cHg7CiAgICAgIGJvcmRlcjpub25lOwogICAgICBib3JkZXItcmFkaXVzOjZweDsKICAgICAgYmFja2dyb3VuZDojMmEyYTMzOwogICAgICBjb2xvcjojZWVlOwogICAgICBmb250LXNpemU6MTZweDsKICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgIH0KICAgIGJ1dHRvbiB7IGJhY2tncm91bmQ6IzNiODJmNjsgZm9udC13ZWlnaHQ6Ym9sZDsgY3Vyc29yOnBvaW50ZXI7IH0KICAgIHRhYmxlIHsKICAgICAgd2lkdGg6MTAwJTsKICAgICAgYm9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlOwogICAgICBtYXJnaW4tdG9wOjE2cHg7CiAgICAgIGZvbnQtc2l6ZToxNHB4OwogICAgfQogICAgdGgsdGQgewogICAgICBwYWRkaW5nOjEwcHg7CiAgICAgIGJvcmRlci1ib3R0b206MXB4IHNvbGlkICMzMzM7CiAgICAgIHRleHQtYWxpZ246bGVmdDsKICAgIH0KICAgIHRoIHsKICAgICAgYmFja2dyb3VuZDojMmEyYTMzOwogICAgICBjb2xvcjojZWVlOwogICAgfQogICAgdHI6aG92ZXIgeyBiYWNrZ3JvdW5kOiMyYTJhMzM7IH0KICAgIC5ib3R0b20tYnV0dG9ucyB7CiAgICAgIGRpc3BsYXk6ZmxleDsKICAgICAgZ2FwOjEwcHg7CiAgICAgIG1hcmdpbjoyMHB4IDA7CiAgICB9CiAgICAuYm90dG9tLWJ1dHRvbnMgZm9ybSB7IGZsZXg6MTsgfQogICAgLmJvdHRvbS1idXR0b25zIGJ1dHRvbiB7CiAgICAgIHdpZHRoOjEwMCU7CiAgICAgIHBhZGRpbmc6MTJweDsKICAgICAgYm9yZGVyOm5vbmU7CiAgICAgIGJvcmRlci1yYWRpdXM6NnB4OwogICAgICBjb2xvcjojZmZmOwogICAgICBmb250LXNpemU6MTZweDsKICAgICAgY3Vyc29yOnBvaW50ZXI7CiAgICB9CiAgICAuc2h1dGRvd24tYnRuIHsgYmFja2dyb3VuZDojZWY0NDQ0OyB9CiAgICAudXBkYXRlLWJ0biB7IGJhY2tncm91bmQ6IzEwYjk4MTsgfQogICAgLnZlcnNpb24gewogICAgICB0ZXh0LWFsaWduOmNlbnRlcjsKICAgICAgZm9udC1zaXplOjE0cHg7CiAgICAgIGNvbG9yOiNhYWE7CiAgICB9CiAgICBAbWVkaWEobWF4LXdpZHRoOjc2OHB4KXsKICAgICAgaW5wdXQsIHNlbGVjdCwgYnV0dG9uIHsgZm9udC1zaXplOjE4cHg7IH0KICAgICAgdGFibGUgeyBmb250LXNpemU6MTJweDsgfQogICAgfQoKICAgIC8qIENvbmZpcm1hdGlvbiBtb2RhbCAqLwogICAgLm1vZGFsIHsKICAgICAgZGlzcGxheTpub25lOwogICAgICBwb3NpdGlvbjpmaXhlZDsKICAgICAgdG9wOjA7IGxlZnQ6MDsgcmlnaHQ6MDsgYm90dG9tOjA7CiAgICAgIGJhY2tncm91bmQ6IzAwMGE7CiAgICAgIGFsaWduLWl0ZW1zOmNlbnRlcjsKICAgICAganVzdGlmeS1jb250ZW50OmNlbnRlcjsKICAgICAgei1pbmRleDoxMDAwOwogICAgfQogICAgLm1vZGFsLWNvbnRlbnQgewogICAgICBiYWNrZ3JvdW5kOiMxZDFkMjg7CiAgICAgIHBhZGRpbmc6MjBweDsKICAgICAgYm9yZGVyLXJhZGl1czoxMHB4OwogICAgICBtYXgtd2lkdGg6NDAwcHg7CiAgICAgIHRleHQtYWxpZ246Y2VudGVyOwogICAgICBib3gtc2hhZG93OjAgMCAyMHB4ICMwMDA4OwogICAgfQogICAgLm1vZGFsLWNvbnRlbnQgaDMgewogICAgICBtYXJnaW4tdG9wOjA7CiAgICAgIGNvbG9yOiMzYjgyZjY7CiAgICB9CiAgICAubW9kYWwtYnV0dG9ucyB7CiAgICAgIG1hcmdpbi10b3A6MjBweDsKICAgICAgZGlzcGxheTpmbGV4OwogICAgICBnYXA6MTBweDsKICAgICAganVzdGlmeS1jb250ZW50OmNlbnRlcjsKICAgIH0KICAgIC5tb2RhbC1idXR0b25zIGJ1dHRvbiB7CiAgICAgIGZsZXg6MTsKICAgICAgcGFkZGluZzoxMHB4OwogICAgICBib3JkZXI6bm9uZTsKICAgICAgYm9yZGVyLXJhZGl1czo2cHg7CiAgICAgIGZvbnQtc2l6ZToxNHB4OwogICAgICBjdXJzb3I6cG9pbnRlcjsKICAgIH0KICAgIC5jb25maXJtLWJ0biB7IGJhY2tncm91bmQ6I2VmNDQ0NDsgY29sb3I6I2ZmZjsgfQogICAgLmNhbmNlbC1idG4geyBiYWNrZ3JvdW5kOiMzNzQxNTE7IGNvbG9yOiNmZmY7IH0KICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5PgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8aDE+Sm9iIERhc2hib2FyZDwvaDE+CiAgICA8ZGl2IGlkPSJiYW5uZXIiIHN0eWxlPSJkaXNwbGF5Om5vbmU7IHBhZGRpbmc6MTBweDsgbWFyZ2luOjEwcHggMDsgYm9yZGVyLXJhZGl1czo2cHg7IHRleHQtYWxpZ246Y2VudGVyOyI+PC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgPGgyPkNyZWF0ZSBOZXcgSm9iPC9oMj4KICAgICAgPGZvcm0gaWQ9ImpvYkZvcm0iPgogICAgICAgIDxpbnB1dCBuYW1lPSJ1c2VybmFtZSIgcGxhY2Vob2xkZXI9IlVzZXJuYW1lIiByZXF1aXJlZCAvPgogICAgICAgIDxpbnB1dCBuYW1lPSJub19vcmRlciIgcGxhY2Vob2xkZXI9Ik9yZGVyIElEIiByZXF1aXJlZCAvPgogICAgICAgIDxpbnB1dCBuYW1lPSJuYW1hX3N0b3JlIiBwbGFjZWhvbGRlcj0iU3RvcmUgTmFtZSIgcmVxdWlyZWQgLz4KICAgICAgICA8aW5wdXQgbmFtZT0iamFtX3NlbGVzYWlfam9raSIgdHlwZT0ibnVtYmVyIiBzdGVwPSJhbnkiIHBsYWNlaG9sZGVyPSJEdXJhdGlvbiAoaG91cnMpIiAvPgogICAgICAgIDxpbnB1dCBuYW1lPSJ0YXJnZXRfYm9uZCIgdHlwZT0ibnVtYmVyIiBwbGFjZWhvbGRlcj0iVGFyZ2V0IEJvbmQgKGZvciBib25kcykiIC8+CiAgICAgICAgPHNlbGVjdCBuYW1lPSJ0eXBlIiByZXF1aXJlZD4KICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImFmayI+QUZLPC9vcHRpb24+CiAgICAgICAgICA8b3B0aW9uIHZhbHVlPSJib25kcyI+Qm9uZHM8L29wdGlvbj4KICAgICAgICA8L3NlbGVjdD4KICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCI+8J+agCBTdGFydCBKb2I8L2J1dHRvbj4KICAgICAgPC9mb3JtPgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgIDxoMj5QZW5kaW5nIEpvYnM8L2gyPgogICAgICA8ZGl2IHN0eWxlPSJvdmVyZmxvdy14OmF1dG87Ij4KICAgICAgICA8dGFibGU+CiAgICAgICAgICA8dHI+PHRoPlVzZXJuYW1lPC90aD48dGg+T3JkZXI8L3RoPjx0aD5TdG9yZTwvdGg+PHRoPlR5cGU8L3RoPjx0aD5JbmZvPC90aD48dGg+QWN0aW9uPC90aD48L3RyPgogICAgICAgICAgJHtyZW5kZXJSb3dzKHBlbmRMaXN0LCAicGVuZGluZyIpfQogICAgICAgIDwvdGFibGU+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgIDxoMj5BY3RpdmUgSm9iczwvaDI+CiAgICAgIDxkaXYgc3R5bGU9Im92ZXJmbG93LXg6YXV0bzsiPgogICAgICAgIDx0YWJsZT4KICAgICAgICAgIDx0cj48dGg+VXNlcm5hbWU8L3RoPjx0aD5PcmRlcjwvdGg+PHRoPlN0b3JlPC90aD48dGg+VHlwZTwvdGg+PHRoPkluZm88L3RoPjx0aD5BY3Rpb248L3RoPjwvdHI+CiAgICAgICAgICAke3JlbmRlclJvd3MoYWN0aXZlTGlzdCwgImFjdGl2ZSIpfQogICAgICAgIDwvdGFibGU+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgIDxoMj5Db21wbGV0ZWQgSm9iczwvaDI+CiAgICAgIDxkaXYgc3R5bGU9Im92ZXJmbG93LXg6YXV0bzsiPgogICAgICAgIDx0YWJsZT4KICAgICAgICAgIDx0cj48dGg+VXNlcm5hbWU8L3RoPjx0aD5PcmRlcjwvdGg+PHRoPlN0b3JlPC90aD48dGg+VHlwZTwvdGg+PHRoPkluZm88L3RoPjx0aD5BY3Rpb248L3RoPjwvdHI+CiAgICAgICAgICAke3JlbmRlclJvd3MoY29tcGxldGVkTGlzdCwgImNvbXBsZXRlZCIpfQogICAgICAgIDwvdGFibGU+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iYm90dG9tLWJ1dHRvbnMiPgogICAgICA8Zm9ybSBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iL3NodXRkb3duIj4KICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgY2xhc3M9InNodXRkb3duLWJ0biI+8J+UtCBTaHV0ZG93bjwvYnV0dG9uPgogICAgICA8L2Zvcm0+CiAgICAgIDxmb3JtIG1ldGhvZD0iUE9TVCIgYWN0aW9uPSIvcmVzdGFydCI+CiAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIGNsYXNzPSJ1cGRhdGUtYnRuIj7wn5+iIFVwZGF0ZTwvYnV0dG9uPgogICAgICA8L2Zvcm0+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJ2ZXJzaW9uIj4KICAgICAgdmVyc2lvbjogJHt2ZXJzaW9ufTxicj4KICAgICAgJHtjaGFuZ2Vsb2cubWFwKGwgPT4gYOKAoiAke2x9YCkuam9pbigiPGJyPiIpfQogICAgPC9kaXY+CiAgPC9kaXY+CgogIDwhLS0gQ29uZmlybWF0aW9uIG1vZGFsIC0tPgogIDxkaXYgY2xhc3M9Im1vZGFsIiBpZD0iY29uZmlybU1vZGFsIj4KICAgIDxkaXYgY2xhc3M9Im1vZGFsLWNvbnRlbnQiPgogICAgICA8aDM+Q29uZmlybSBEZWxldGU8L2gzPgogICAgICA8cCBpZD0iY29uZmlybVRleHQiPjwvcD4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYnV0dG9ucyI+CiAgICAgICAgPGJ1dHRvbiBpZD0iY29uZmlybVllcyIgY2xhc3M9ImNvbmZpcm0tYnRuIj5SZW1vdmU8L2J1dHRvbj4KICAgICAgICA8YnV0dG9uIGlkPSJjb25maXJtTm8iIGNsYXNzPSJjYW5jZWwtYnRuIj5DYW5jZWw8L2J1dHRvbj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgPHNjcmlwdD4KICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJqb2JGb3JtIikub25zdWJtaXQgPSBhc3luYyBlID0+IHsKICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICBjb25zdCBkYXRhID0gT2JqZWN0LmZyb21FbnRyaWVzKG5ldyBGb3JtRGF0YShlLnRhcmdldCkpOwogICAgICBhd2FpdCBmZXRjaCgiL3N0YXJ0LWpvYiIsIHsKICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICBoZWFkZXJzOiB7ICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIgfSwKICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKQogICAgICB9KTsKICAgICAgbG9jYXRpb24ucmVsb2FkKCk7CiAgICB9OwoKICAgIC8vIEJhbm5lciBtZXNzYWdlIG9uIGxvYWQKICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7CiAgICBjb25zdCBiYW5uZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYmFubmVyIik7CiAgICBpZiAocGFyYW1zLmhhcygicmVtb3ZlZCIpKSB7CiAgICAgIGJhbm5lci50ZXh0Q29udGVudCA9ICLinIUgUmVtb3ZlZCBqb2IgIiArIHBhcmFtcy5nZXQoInJlbW92ZWQiKTsKICAgICAgYmFubmVyLnN0eWxlLmRpc3BsYXkgPSAiYmxvY2siOwogICAgICBiYW5uZXIuc3R5bGUuYmFja2dyb3VuZCA9ICIjMTBiOTgxIjsKICAgICAgYmFubmVyLnN0eWxlLmNvbG9yID0gIiNmZmYiOwogICAgfSBlbHNlIGlmIChwYXJhbXMuaGFzKCJlcnJvciIpKSB7CiAgICAgIGJhbm5lci50ZXh0Q29udGVudCA9ICLimqDvuI8gSm9iIG5vdCBmb3VuZCI7CiAgICAgIGJhbm5lci5zdHlsZS5kaXNwbGF5ID0gImJsb2NrIjsKICAgICAgYmFubmVyLnN0eWxlLmJhY2tncm91bmQgPSAiI2VmNDQ0NCI7CiAgICAgIGJhbm5lci5zdHlsZS5jb2xvciA9ICIjZmZmIjsKICAgIH0KCiAgICAvLyBDb25maXJtYXRpb24gbW9kYWwgbG9naWMKICAgIGxldCBwZW5kaW5nRm9ybSA9IG51bGw7CiAgICBmdW5jdGlvbiBjb25maXJtRGVsZXRlKHVzZXJuYW1lLCBvcmRlcklkLCBmb3JtRWwpIHsKICAgICAgcGVuZGluZ0Zvcm0gPSBmb3JtRWw7CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjb25maXJtVGV4dCIpLnRleHRDb250ZW50ID0KICAgICAgICBcYFVzZXJuYW1lOiBcJHt1c2VybmFtZX0gfCBPcmRlciBJRDogXCR7b3JkZXJJZH1cYDsKICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNvbmZpcm1Nb2RhbCIpLnN0eWxlLmRpc3BsYXkgPSAiZmxleCI7CiAgICAgIHJldHVybiBmYWxzZTsgLy8gYmxvY2sgZm9ybSBzdWJtaXQgdW50aWwgY29uZmlybWVkCiAgICB9CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiY29uZmlybVllcyIpLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIGlmIChwZW5kaW5nRm9ybSkgcGVuZGluZ0Zvcm0uc3VibWl0KCk7CiAgICB9OwogICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImNvbmZpcm1ObyIpLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjb25maXJtTW9kYWwiKS5zdHlsZS5kaXNwbGF5ID0gIm5vbmUiOwogICAgICBwZW5kaW5nRm9ybSA9IG51bGw7CiAgICB9OwogIDwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4KICBgKTsKfSk7CgovLyA9PT0gL3RyYWNrIEVuZHBvaW50ID09PQphcHAucG9zdCgnL3RyYWNrJywgKHJlcSwgcmVzKSA9PiB7CiAgICBjb25zdCB7IHVzZXJuYW1lIH0gPSByZXEuYm9keTsKICAgIGlmICghdXNlcm5hbWUpIHsKICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogJ01pc3NpbmcgdXNlcm5hbWUnIH0pOwogICAgfQoKICAgIGNvbnN0IHVzZXIgPSB1c2VybmFtZS50b0xvd2VyQ2FzZSgpOyAvLyBOb3JtYWxpemUgdXNlcm5hbWUKCiAgICBsZXQgam9iID0gc2Vzc2lvbnMuZ2V0KHVzZXIpOwoKICAgIC8vIElmIG5vdCBpbiBzZXNzaW9ucywgYnV0IGluIHBlbmRpbmc6IG1vdmUgdG8gc2Vzc2lvbnMhCiAgICBpZiAoIWpvYikgewogICAgICAgIGpvYiA9IHBlbmRpbmcuZ2V0KHVzZXIpOwogICAgICAgIGlmIChqb2IpIHsKICAgICAgICAgICAgcGVuZGluZy5kZWxldGUodXNlcik7CiAgICAgICAgICAgIC8vIEFzc3VtZSBqb2Iuc3RhcnRUaW1lIGFuZCBqb2IuZW5kVGltZSBhcmUgYWx3YXlzIHNldAogICAgICAgICAgICBzZXNzaW9ucy5zZXQodXNlciwgam9iKTsKICAgICAgICAgICAgc2F2ZVN0b3JhZ2UoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogJ05vIGpvYiBmb3VuZCBmb3IgdGhpcyB1c2VyJyB9KTsKICAgICAgICB9CiAgICB9CiAgICBsYXN0U2Vlbi5zZXQodXNlciwgRGF0ZS5ub3coKSk7CiAgICByZXMuanNvbih7CiAgICAgICAgZW5kVGltZTogam9iLmVuZFRpbWUsCiAgICAgICAgc3RhcnRUaW1lOiBqb2Iuc3RhcnRUaW1lLAogICAgICAgIGR1cmF0aW9uOiBqb2IuZHVyYXRpb24KICAgIH0pOwp9KTsKCi8vID09PSAvc3RhcnQtam9iID09PQphcHAucG9zdCgiL3N0YXJ0LWpvYiIsIGFzeW5jIChyZXEsIHJlcykgPT4gewogIGNvbnN0IHsKICAgIHVzZXJuYW1lLAogICAgbm9fb3JkZXIsCiAgICBuYW1hX3N0b3JlLAogICAgamFtX3NlbGVzYWlfam9raSwKICAgIHRhcmdldF9ib25kLAogICAgdHlwZQogIH0gPSByZXEuYm9keTsKCiAgY29uc3QgdXNlciA9IHVzZXJuYW1lLnRvTG93ZXJDYXNlKCk7CiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTsKICBjb25zdCBob3VycyA9IHBhcnNlRmxvYXQoamFtX3NlbGVzYWlfam9raSB8fCAiMCIpIHx8IDA7CiAgY29uc3QgZW5kVGltZSA9IG5vdyArIGhvdXJzICogMzYwMCAqIDEwMDA7CgogIGNvbnN0IHNlc3Npb24gPSB7CiAgICB1c2VybmFtZSwKICAgIG5vX29yZGVyLAogICAgbmFtYV9zdG9yZSwKICAgIGVuZFRpbWUsCiAgICB0eXBlLAogICAgc3RhcnRfYm9uZHM6IDAsCiAgICBjdXJyZW50X2JvbmRzOiAwLAogICAgdGFyZ2V0X2JvbmQ6IHBhcnNlSW50KHRhcmdldF9ib25kIHx8ICIwIiksCiAgICBzdGFydFRpbWU6IG5vdwogIH07CgogIHBlbmRpbmcuc2V0KHVzZXIsIHNlc3Npb24pOwogIHNhdmVTdG9yYWdlKCk7CgogIC8vIFNlbmQgZW1iZWQgdG8gRGlzY29yZCAoeWVsbG93IGZvciBzdGFydCkKICBjb25zdCBlbWJlZCA9IHsKICAgIGVtYmVkczogW3sKICAgICAgdGl0bGU6IGDwn5qAIE5ldyBKb2tpIFN0YXJ0ZWQg4oCTICR7dXNlcm5hbWV9YCwKICAgICAgZGVzY3JpcHRpb246IGAqKlR5cGU6KiogJHt0eXBlfVxuKipPcmRlcjoqKiAke25vX29yZGVyfVxuKipTdG9yZToqKiAke25hbWFfc3RvcmV9YCwKICAgICAgY29sb3I6IDB4ZmZkNzAwLAogICAgICBmaWVsZHM6IFt7CiAgICAgICAgbmFtZTogIkVuZCBUaW1lIiwKICAgICAgICB2YWx1ZTogYDx0OiR7TWF0aC5mbG9vcihlbmRUaW1lIC8gMTAwMCl9OlI+YCwKICAgICAgICBpbmxpbmU6IHRydWUKICAgICAgfSwgewogICAgICAgIG5hbWU6ICJTdGFydCBUaW1lIiwKICAgICAgICB2YWx1ZTogYDx0OiR7TWF0aC5mbG9vcihub3cgLyAxMDAwKX06Rj5gLAogICAgICAgIGlubGluZTogdHJ1ZQogICAgICB9XQogICAgfV0KICB9OwoKICBmZXRjaChgaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvdjEwL2NoYW5uZWxzLyR7Q0hBTk5FTH0vbWVzc2FnZXNgLCB7CiAgICBtZXRob2Q6ICJQT1NUIiwKICAgIGhlYWRlcnM6IHsKICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgQXV0aG9yaXphdGlvbjogYEJvdCAke0JPVF9UT0tFTn1gCiAgICB9LAogICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZW1iZWQpCiAgfSkuY2F0Y2goY29uc29sZS5lcnJvcik7CgogIHJlcy5qc29uKHsgb2s6IHRydWUgfSk7Cn0pOwoKLy8gPT09IC9jYW5jZWwvOnVzZXJuYW1lID09PQphcHAuZ2V0KCIvY2FuY2VsLzp1c2VybmFtZS86b3JkZXIiLCAocmVxLCByZXMpID0+IHsKICBjb25zdCB1bmFtZSA9IHJlcS5wYXJhbXMudXNlcm5hbWUudG9Mb3dlckNhc2UoKTsKICBjb25zdCBvcmRlciA9IHJlcS5wYXJhbXMub3JkZXIudG9Mb3dlckNhc2UoKTsKCiAgbGV0IHJlbW92ZWQgPSBmYWxzZTsKCiAgLy8gQWN0aXZlCiAgaWYgKHNlc3Npb25zLmhhcyh1bmFtZSkpIHsKICAgIGNvbnN0IHMgPSBzZXNzaW9ucy5nZXQodW5hbWUpOwogICAgaWYgKHMubm9fb3JkZXIgJiYgcy5ub19vcmRlci50b0xvd2VyQ2FzZSgpID09PSBvcmRlcikgewogICAgICBzZXNzaW9ucy5kZWxldGUodW5hbWUpOwogICAgICBsYXN0U2Vlbi5kZWxldGUodW5hbWUpOwogICAgICBsYXN0U2VudC5kZWxldGUodW5hbWUpOwogICAgICByZW1vdmVkID0gdHJ1ZTsKICAgIH0KICB9CgogIC8vIFBlbmRpbmcKICBpZiAocGVuZGluZy5oYXModW5hbWUpKSB7CiAgICBjb25zdCBzID0gcGVuZGluZy5nZXQodW5hbWUpOwogICAgaWYgKHMubm9fb3JkZXIgJiYgcy5ub19vcmRlci50b0xvd2VyQ2FzZSgpID09PSBvcmRlcikgewogICAgICBwZW5kaW5nLmRlbGV0ZSh1bmFtZSk7CiAgICAgIHJlbW92ZWQgPSB0cnVlOwogICAgfQogIH0KCiAgLy8gQ29tcGxldGVkCiAgaWYgKGNvbXBsZXRlZC5oYXModW5hbWUpKSB7CiAgICBjb25zdCBhcnIgPSBjb21wbGV0ZWQuZ2V0KHVuYW1lKTsKICAgIGNvbnN0IG5ld0FyciA9IGFyci5maWx0ZXIocyA9PiAhcy5ub19vcmRlciB8fCBzLm5vX29yZGVyLnRvTG93ZXJDYXNlKCkgIT09IG9yZGVyKTsKICAgIGlmIChuZXdBcnIubGVuZ3RoICE9PSBhcnIubGVuZ3RoKSB7CiAgICAgIGNvbXBsZXRlZC5zZXQodW5hbWUsIG5ld0Fycik7CiAgICAgIHJlbW92ZWQgPSB0cnVlOwogICAgfQogIH0KCiAgaWYgKHJlbW92ZWQpIHsKICAgIHNhdmVTdG9yYWdlKCk7CiAgICByZXR1cm4gcmVzLnJlZGlyZWN0KGAvZGFzaGJvYXJkP3JlbW92ZWQ9JHt1bmFtZX06JHtvcmRlcn1gKTsKICB9IGVsc2UgewogICAgcmV0dXJuIHJlcy5yZWRpcmVjdCgiL2Rhc2hib2FyZD9lcnJvcj1ub3Rmb3VuZCIpOwogIH0KfSk7CgovLyA9PT0gYm9uZAphcHAucG9zdCgiL2JvbmQiLCBhc3luYyAocmVxLCByZXMpID0+IHsKICBjb25zdCB7IHVzZXJuYW1lLCBib25kcywgcGxhY2VJZCwgYWxlcnQgfSA9IHJlcS5ib2R5OwoKICBpZiAoIXVzZXJuYW1lKSByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogIk1pc3NpbmcgdXNlcm5hbWUiIH0pOwoKICBjb25zdCB1c2VyID0gdXNlcm5hbWUudG9Mb3dlckNhc2UoKTsKICBjb25zdCBzZXNzaW9uID0gc2Vzc2lvbnMuZ2V0KHVzZXIpOwoKICAvLyDwn5+hIEhhbmRsZSBpZGxlIGFsZXJ0IGZyb20gbG9iYnkKICBpZiAoYWxlcnQgPT09ICJsb2JieV9pZGxlIikgewogICAgYXdhaXQgZmV0Y2goYGh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3YxMC9jaGFubmVscy8ke0NIQU5ORUx9L21lc3NhZ2VzYCwgewogICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgaGVhZGVyczogewogICAgICAgICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsCiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJvdCAke0JPVF9UT0tFTn1gCiAgICAgIH0sCiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICBjb250ZW50OiBg4pqg77iPIEBldmVyeW9uZSAke3VzZXJuYW1lfSBoYXMgYmVlbiBpZGxlIGluIHRoZSBsb2JieSBmb3IgdG9vIGxvbmcuYAogICAgICB9KQogICAgfSkuY2F0Y2goY29uc29sZS5lcnJvcik7CiAgICByZXR1cm4gcmVzLmpzb24oeyBvazogdHJ1ZSwgYWxlcnQ6ICJpZGxlX3NlbnQiIH0pOwogIH0KCiAgLy8g8J+foiBVcGRhdGUgYWN0aXZlIHNlc3Npb24KICBpZiAoc2Vzc2lvbikgewogICAgc2Vzc2lvbi5sYXN0UGxhY2VJZCA9IHBsYWNlSWQ7CiAgICBzZXNzaW9uLmN1cnJlbnRfYm9uZHMgPSBib25kczsKCiAgICBpZiAoc2Vzc2lvbi5zdGFydF9ib25kcyA9PT0gdW5kZWZpbmVkIHx8IHNlc3Npb24uc3RhcnRfYm9uZHMgPT09IDApIHsKICAgICAgc2Vzc2lvbi5zdGFydF9ib25kcyA9IGJvbmRzOwogICAgfQoKICAgIC8vIENoZWNrIGlmIGJvbmQgZ29hbCBtZXQKICAgIGlmICgKICAgICAgc2Vzc2lvbi50eXBlID09PSAiYm9uZHMiICYmCiAgICAgIHNlc3Npb24udGFyZ2V0X2JvbmQgJiYKICAgICAgKGJvbmRzIC0gc2Vzc2lvbi5zdGFydF9ib25kcyA+PSBzZXNzaW9uLnRhcmdldF9ib25kKQogICAgKSB7CiAgICAgIGNvbnN0IG5vdyA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApOwogICAgICBjb25zdCBjbGVhbiA9IHNlc3Npb24ubm9fb3JkZXIucmVwbGFjZSgvXk9EMDAwMDAwLywgIiIpOwoKICAgICAgLy8g4pyFIE5vdGlmeSBEaXNjb3JkCiAgICAgIGF3YWl0IGZldGNoKGBodHRwczovL2Rpc2NvcmQuY29tL2FwaS92MTAvY2hhbm5lbHMvJHtDSEFOTkVMfS9tZXNzYWdlc2AsIHsKICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICAgQXV0aG9yaXphdGlvbjogYEJvdCAke0JPVF9UT0tFTn1gCiAgICAgICAgfSwKICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICBlbWJlZHM6IFt7CiAgICAgICAgICAgIHRpdGxlOiAi4pyFICoqSk9LSSBDT01QTEVURUQqKiIsCiAgICAgICAgICAgIGRlc2NyaXB0aW9uOgogICAgICAgICAgICAgIGAqKlVzZXJuYW1lOioqICR7c2Vzc2lvbi51c2VybmFtZX1cbmAgKwogICAgICAgICAgICAgIGAqKk9yZGVyIElEOioqICR7c2Vzc2lvbi5ub19vcmRlcn1cbmAgKwogICAgICAgICAgICAgIGBb8J+UlyBWaWV3IE9yZGVyXShodHRwczovL3Rva29rdS5pdGVta3UuY29tL3Jpd2F5YXQtcGVzYW5hbi9yaW5jaWFuLyR7Y2xlYW59KVxuXG5gICsKICAgICAgICAgICAgICBg4o+wIENvbXBsZXRlZCBhdDogPHQ6JHtub3d9OmY+YCwKICAgICAgICAgICAgZm9vdGVyOiB7IHRleHQ6IGAtICR7c2Vzc2lvbi5uYW1hX3N0b3JlfWAgfQogICAgICAgICAgfV0KICAgICAgICB9KQogICAgICB9KS5jYXRjaChjb25zb2xlLmVycm9yKTsKCiAgICAgIC8vIE1vdmUgdG8gY29tcGxldGVkIChhcHBlbmQgdG8gYXJyYXkpCiAgICAgIHNlc3Npb24uY29tcGxldGVkQXQgPSBEYXRlLm5vdygpOwogICAgICBzZXNzaW9ucy5kZWxldGUodXNlcik7CiAgICAgIGxhc3RTZWVuLmRlbGV0ZSh1c2VyKTsKICAgICAgaWYgKCFjb21wbGV0ZWQuaGFzKHVzZXIpKSBjb21wbGV0ZWQuc2V0KHVzZXIsIFtdKTsKICAgICAgY29tcGxldGVkLmdldCh1c2VyKS5wdXNoKHNlc3Npb24pOwogICAgICBzYXZlU3RvcmFnZSgpOwoKICAgICAgcmV0dXJuIHJlcy5qc29uKHsgb2s6IHRydWUsIGNvbXBsZXRlZDogdHJ1ZSB9KTsKICAgIH0KCiAgICAvLyBVcGRhdGUgaGVhcnRiZWF0CiAgICBsYXN0U2VudC5zZXQodXNlciwgRGF0ZS5ub3coKSk7CiAgICBzYXZlU3RvcmFnZSgpOwoKICAgIHJldHVybiByZXMuanNvbih7IG9rOiB0cnVlIH0pOwogIH0KCiAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICJObyBhY3RpdmUgc2Vzc2lvbiIgfSk7Cn0pOwoKLy8gPT09IC9zdGF0dXMgKFVJIFBhZ2UpCmFwcC5nZXQoIi9zdGF0dXMiLCAocmVxLCByZXMpID0+IHsKICByZXMuc2VuZChgPCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImlkIj4KPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0iVVRGLTgiLz4KICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIvPgogIDx0aXRsZT5DaGVjayBKb2tpIFN0YXR1czwvdGl0bGU+CiAgPHN0eWxlPgogICAgYm9keSB7CiAgICAgIG1hcmdpbjogMDsgcGFkZGluZzogMDsKICAgICAgbWluLWhlaWdodDogMTAwdmg7CiAgICAgIGZvbnQtZmFtaWx5OiAnSW50ZXInLCBzYW5zLXNlcmlmOwogICAgICBkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSByaWdodCwgIzBmMTcyYSwgIzFlM2E4YSk7CiAgICAgIGNvbG9yOiAjZWVlOwogICAgfQogICAgLm1haW4tY29udGFpbmVyIHsKICAgICAgYmFja2dyb3VuZDogcmdiYSgzNSwgMzUsIDQ1LCAwLjk1KTsKICAgICAgYm9yZGVyLXJhZGl1czogMTJweDsKICAgICAgYm94LXNoYWRvdzogMCAycHggMTZweCAjMDAwODsKICAgICAgcGFkZGluZzogMjBweDsKICAgICAgd2lkdGg6IDkwJTsgbWF4LXdpZHRoOiA1MDBweDsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgfQogICAgLmlucHV0LWdyb3VwIHsKICAgICAgZGlzcGxheTogZmxleDsKICAgICAgbWFyZ2luLXRvcDogMTZweDsKICAgIH0KICAgICN1IHsKICAgICAgZmxleDogMTsKICAgICAgcGFkZGluZzogMTJweDsKICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICBib3JkZXI6IG5vbmU7CiAgICAgIGJvcmRlci1yYWRpdXM6IDRweCAwIDAgNHB4OwogICAgICBiYWNrZ3JvdW5kOiAjMmEyYTMzOwogICAgICBjb2xvcjogI2VlZTsKICAgIH0KICAgIGJ1dHRvbiB7CiAgICAgIHBhZGRpbmc6IDEycHggMTZweDsKICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICBib3JkZXI6IG5vbmU7CiAgICAgIGJvcmRlci1yYWRpdXM6IDAgNHB4IDRweCAwOwogICAgICBiYWNrZ3JvdW5kOiAjM2I4MmY2OwogICAgICBjb2xvcjogd2hpdGU7CiAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgIH0KICAgIC5zdGF0dXMtZnJhbWUgewogICAgICBtYXJnaW4tdG9wOiAyMHB4OwogICAgICBwYWRkaW5nOiAxNnB4OwogICAgICBiYWNrZ3JvdW5kOiAjMmMyYzM0OwogICAgICBib3JkZXItcmFkaXVzOiA4cHg7CiAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDEwcHggIzAwMDsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICB0cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlLWluLW91dDsKICAgICAgb3BhY2l0eTogMDsKICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjk4KTsKICAgIH0KICAgIC5zdGF0dXMtZnJhbWUudmlzaWJsZSB7CiAgICAgIG9wYWNpdHk6IDE7CiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7CiAgICB9CiAgICAucXItZnJhbWUgewogICAgICBtYXJnaW4tdG9wOiAyMHB4OwogICAgICBwYWRkaW5nOiAxNnB4OwogICAgICBiYWNrZ3JvdW5kOiAjMWYxZjI1OwogICAgICBib3JkZXItcmFkaXVzOiA4cHg7CiAgICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICAgIGZvbnQtc2l6ZTogMTRweDsKICAgIH0KICAgIGgzIHsKICAgICAgbWFyZ2luLWJvdHRvbTogOHB4OwogICAgICBjb2xvcjogIzYwYTVmYTsKICAgIH0KICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5PgogIDxkaXYgY2xhc3M9Im1haW4tY29udGFpbmVyIj4KICAgIDxoMj7wn5SNIENlayBTdGF0dXMgSm9raTwvaDI+CiAgICA8ZGl2IGNsYXNzPSJpbnB1dC1ncm91cCI+CiAgICAgIDxpbnB1dCBpZD0idSIgcGxhY2Vob2xkZXI9IlVzZXJuYW1lIGF0YXUgT3JkZXIgSUQiLz4KICAgICAgPGJ1dHRvbiBvbmNsaWNrPSJzdGFydENoZWNrKCkiPkNoZWNrPC9idXR0b24+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGlkPSJyIiBjbGFzcz0ic3RhdHVzLWZyYW1lIj48L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJxci1mcmFtZSI+CiAgICAgIDxoMz5NYXUgRGlza29uIFVudHVrIFBlbWJlbGlhbiBTZWxhbmp1dG55YT88L2gzPgogICAgICA8cD5NaW50YSBrb2RlIFFSSVMga2Ugb3duZXIgdmlhIFdoYXRzQXBwIHVudHVrIGRhcGF0IGhhcmdhIGxlYmloIG11cmFoLjwvcD4KICAgICAgPGgzPkFwYWthaCBUaWRhayBCaXNhIE1lbmRhcGF0a2FuIERpc2tvbiBEaSBJdGVta3U/PC9oMz4KICAgICAgPHA+S2FyZW5hIGFkYSBwYWphayAxMiUgZGFyaSBJdGVta3UsIHNheWEgaGFueWEgYmlzYSBiZXJpa2FuIGhhcmdhIHNlZ2l0dS4gSW5pIFFSSVMgc2F5YSBzZWJlbHVtIHBpbmRhaCBrZSBJdGVta3UuPC9wPgogICAgICA8aDM+RHVsdSBCZXJqdWFsYW4gRGltYW5hPzwvaDM+CiAgICAgIDxwPvCfpKs8L3A+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgPHNjcmlwdD4KICAgIGxldCBpbnRlcnZhbDsKICAgIGZ1bmN0aW9uIHN0YXJ0Q2hlY2soKSB7CiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpOwogICAgICBjb25zdCBxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3UnKS52YWx1ZS50cmltKCk7CiAgICAgIGlmICghcSkgcmV0dXJuOwogICAgICBjaGVjayhxKTsKICAgICAgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiBjaGVjayhxKSwgMTAwMCk7CiAgICB9CgogICAgYXN5bmMgZnVuY3Rpb24gY2hlY2socSkgewogICAgICBjb25zdCBvdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncicpOwogICAgICB0cnkge2NvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCcvc3RhdHVzLycgKyBxdWVyeSArICc/Zm9ybWF0PWpzb24nKTsKICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7CiAgICAgICAgCgogICAgICAgIG91dC5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7CgogICAgICAgIGlmICghcmVzLm9rKSB7CiAgICAgICAgICBvdXQuaW5uZXJIVE1MID0gJ+KdjCAnICsgZC5lcnJvcjsKICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKGQuc3RhdHVzID09PSAncGVuZGluZycpIHsKICAgICAgICAgIG91dC5pbm5lckhUTUwgPSAn4oybIDxiPicgKyBkLnVzZXJuYW1lICsgJzwvYj4gc2VkYW5nIG1lbnVuZ2d1Li4uJzsKICAgICAgICB9IGVsc2UgaWYgKGQuc3RhdHVzID09PSAncnVubmluZycgfHwgZC5zdGF0dXMgPT09ICdpbmFjdGl2ZScpIHsKICAgICAgICAgIGNvbnN0IHJlbSA9IE1hdGgubWF4KDAsIE1hdGguZmxvb3IoKGQuZW5kVGltZSAtIERhdGUubm93KCkpIC8gMTAwMCkpOwogICAgICAgICAgY29uc3QgaCA9IE1hdGguZmxvb3IocmVtIC8gMzYwMCksIG0gPSBNYXRoLmZsb29yKChyZW0gJSAzNjAwKSAvIDYwKSwgcyA9IHJlbSAlIDYwOwogICAgICAgICAgY29uc3QgbGFzdFNlZW5BZ28gPSBNYXRoLm1heCgwLCBEYXRlLm5vdygpIC0gZC5sYXN0U2Vlbik7CiAgICAgICAgICBjb25zdCBsbSA9IE1hdGguZmxvb3IobGFzdFNlZW5BZ28gLyA2MDAwMCk7CiAgICAgICAgICBjb25zdCBscyA9IE1hdGguZmxvb3IoKGxhc3RTZWVuQWdvICUgNjAwMDApIC8gMTAwMCk7CgogICAgICAgICAgbGV0IHRleHQgPSAoZC5zdGF0dXMgPT09ICdpbmFjdGl2ZScgPyAn8J+UtCAnIDogJ/Cfn6IgJykgKyAnPGI+JyArIGQudXNlcm5hbWUgKyAnPC9iPiBha3RpZjxicj4nOwogICAgICAgICAgaWYgKGQudHlwZSA9PT0gJ2JvbmRzJykgewogICAgICAgICAgICB0ZXh0ICs9ICfwn5OIIEdhaW5lZDogJyArIGQuZ2FpbmVkICsgJyAvICcgKyBkLnRhcmdldEJvbmRzICsgJyBib25kczxicj4nOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGV4dCArPSAn4o+zIFRpbWUgbGVmdDogJyArIGggKyAnaCAnICsgbSArICdtICcgKyBzICsgJ3M8YnI+JzsKICAgICAgICAgIH0KICAgICAgICAgIHRleHQgKz0gJ/CfkYHvuI8gTGFzdCBzZWVuOiAnICsgbG0gKyAnbSAnICsgbHMgKyAncyBhZ288YnI+JzsKICAgICAgICAgIG91dC5pbm5lckhUTUwgPSB0ZXh0OwogICAgICAgIH0gZWxzZSBpZiAoZC5zdGF0dXMgPT09ICdjb21wbGV0ZWQnKSB7CiAgICAgICAgICBsZXQgdGV4dCA9ICfinIUgPGI+JyArIGQudXNlcm5hbWUgKyAnPC9iPiBzZWxlc2FpPGJyPic7CiAgICAgICAgICB0ZXh0ICs9ICfwn6e+IE9yZGVyOiAnICsgZC5ub19vcmRlciArICc8YnI+JzsKICAgICAgICAgIGlmIChkLmdhaW5lZCAhPT0gdW5kZWZpbmVkKSB0ZXh0ICs9ICfwn5OIIEdhaW5lZDogJyArIGQuZ2FpbmVkICsgJyBib25kcyc7CiAgICAgICAgICBvdXQuaW5uZXJIVE1MID0gdGV4dDsKICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCB7CiAgICAgICAgb3V0LmlubmVySFRNTCA9ICfinYwgRXJyb3IgZmV0Y2hpbmcgc3RhdHVzJzsKICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTsKICAgICAgfQogICAgfQogIDwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD5gKTsKfSk7CmFwcC5nZXQoIi9zdGF0dXMvOnF1ZXJ5IiwgKHJlcSwgcmVzKSA9PiB7CiAgY29uc3QgdW5hbWUgPSByZXEucGFyYW1zLnF1ZXJ5LnRvTG93ZXJDYXNlKCk7CiAgY29uc3QgZm9ybWF0ID0gcmVxLnF1ZXJ5LmZvcm1hdCB8fCAianNvbiI7IC8vIGpzb24gfCB0ZXh0CiAgY29uc3QgbGVnYWN5ID0gcmVxLnF1ZXJ5LmxlZ2FjeSA9PT0gIjEiOwoKICBsZXQgcmVzdWx0ID0gewogICAgdXNlcm5hbWU6IHVuYW1lLAogICAgcGVuZGluZzogZmFsc2UsCiAgICBhY3RpdmU6IGZhbHNlLAogICAgY29tcGxldGVkOiBbXSwKICAgIG1lc3NhZ2U6ICIiCiAgfTsKCiAgLy8gUGVuZGluZwogIGlmIChwZW5kaW5nLmhhcyh1bmFtZSkpIHsKICAgIHJlc3VsdC5wZW5kaW5nID0gdHJ1ZTsKICAgIHJlc3VsdC5tZXNzYWdlID0gYOKMmyAke3VuYW1lfSBzZWRhbmcgbWVudW5nZ3UuLi5gOwoKICAgIGlmIChmb3JtYXQgPT09ICJ0ZXh0IikgewogICAgICByZXR1cm4gcmVzLnNlbmQocmVzdWx0Lm1lc3NhZ2UpOwogICAgfQogICAgaWYgKGxlZ2FjeSkgewogICAgICByZXR1cm4gcmVzLmpzb24oeyBzdGF0dXM6ICJwZW5kaW5nIiwgdXNlcm5hbWU6IHVuYW1lLCBtZXNzYWdlOiByZXN1bHQubWVzc2FnZSB9KTsKICAgIH0KICAgIHJldHVybiByZXMuanNvbihyZXN1bHQpOwogIH0KCiAgLy8gQWN0aXZlCiAgaWYgKHNlc3Npb25zLmhhcyh1bmFtZSkpIHsKICAgIGNvbnN0IHMgPSBzZXNzaW9ucy5nZXQodW5hbWUpOwogICAgY29uc3QgdGltZUxlZnQgPSBzLmVuZFRpbWUgPyBzLmVuZFRpbWUgLSBEYXRlLm5vdygpIDogMDsKICAgIGNvbnN0IGxhc3RTZWVuVGltZSA9IGxhc3RTZWVuLmhhcyh1bmFtZSkgPyBEYXRlLm5vdygpIC0gbGFzdFNlZW4uZ2V0KHVuYW1lKSA6IG51bGw7CgogICAgcmVzdWx0LmFjdGl2ZSA9IHRydWU7CiAgICByZXN1bHQubWVzc2FnZSA9IGDwn5+iICIke3VuYW1lfSIgYWt0aWZgOwoKICAgIGlmICh0aW1lTGVmdCkgewogICAgICByZXN1bHQudGltZUxlZnQgPSB0aW1lTGVmdDsKICAgIH0KICAgIGlmIChsYXN0U2VlblRpbWUgIT09IG51bGwpIHsKICAgICAgcmVzdWx0Lmxhc3RTZWVuID0gbGFzdFNlZW5UaW1lOwogICAgfQoKICAgIC8vIENvbXBsZXRlZCBzZXNzaW9ucwogICAgY29uc3QgY29tcGxldGVkU2Vzc2lvbnMgPSBjb21wbGV0ZWQuZ2V0KHVuYW1lKSB8fCBbXTsKICAgIHJlc3VsdC5jb21wbGV0ZWQgPSBjb21wbGV0ZWRTZXNzaW9ucy5tYXAoYyA9PiAoewogICAgICB1c2VybmFtZTogYy51c2VybmFtZSwKICAgICAgbm9fb3JkZXI6IGMubm9fb3JkZXIgfHwgbnVsbCwKICAgICAgbmFtYV9zdG9yZTogYy5uYW1hX3N0b3JlIHx8IG51bGwsCiAgICAgIGNvbXBsZXRlZEF0OiBjLmNvbXBsZXRlZEF0IHx8IG51bGwKICAgIH0pKTsKCiAgICBpZiAoZm9ybWF0ID09PSAidGV4dCIpIHsKICAgICAgY29uc3QgYWN0aXZlTWVzc2FnZSA9IGAK8J+foiAiJHt1bmFtZX0iIGFrdGlmCuKPsyBUaW1lIGxlZnQ6ICR7dGltZUxlZnQgPiAwID8gbXNUb1RpbWUodGltZUxlZnQpIDogIkV4cGlyZWQifQrwn5GB77iPIExhc3Qgc2VlbjogJHtsYXN0U2VlblRpbWUgIT0gbnVsbCA/IG1zVG9UaW1lKGxhc3RTZWVuVGltZSkgKyAiIGFnbyIgOiAiVW5rbm93biJ9CiAgICAgIGAudHJpbSgpOwoKICAgICAgY29uc3QgY29tcGxldGVkTWVzc2FnZXMgPSByZXN1bHQuY29tcGxldGVkLm1hcChjID0+IGAiJHtjLnVzZXJuYW1lfSIgam9iIHNlbGVzYWkgKG9yZGVyOiAke2Mubm9fb3JkZXIgfHwgIi0ifSlgKTsKICAgICAgcmV0dXJuIHJlcy5zZW5kKFthY3RpdmVNZXNzYWdlLCAuLi4oY29tcGxldGVkTWVzc2FnZXMubGVuZ3RoID8gWyJcbmNvbXBsZXRlZCBzZXNzaW9uKHMpOiIsIC4uLmNvbXBsZXRlZE1lc3NhZ2VzXSA6IFtdKV0uam9pbigiXG4iKSk7CiAgICB9CgogICAgaWYgKGxlZ2FjeSkgewogICAgICByZXR1cm4gcmVzLmpzb24oewogICAgICAgIHN0YXR1czogImFjdGl2ZSIsCiAgICAgICAgdXNlcm5hbWU6IHVuYW1lLAogICAgICAgIHRpbWVMZWZ0LAogICAgICAgIGxhc3RTZWVuOiBsYXN0U2VlblRpbWUsCiAgICAgICAgY29tcGxldGVkOiByZXN1bHQuY29tcGxldGVkCiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiByZXMuanNvbihyZXN1bHQpOwogIH0KCiAgLy8gQ29tcGxldGVkIG9ubHkKICBpZiAoY29tcGxldGVkLmhhcyh1bmFtZSkpIHsKICAgIGNvbnN0IGNvbXBsZXRlZFNlc3Npb25zID0gY29tcGxldGVkLmdldCh1bmFtZSk7CiAgICByZXN1bHQuY29tcGxldGVkID0gY29tcGxldGVkU2Vzc2lvbnMubWFwKGMgPT4gKHsKICAgICAgdXNlcm5hbWU6IGMudXNlcm5hbWUsCiAgICAgIG5vX29yZGVyOiBjLm5vX29yZGVyIHx8IG51bGwsCiAgICAgIG5hbWFfc3RvcmU6IGMubmFtYV9zdG9yZSB8fCBudWxsLAogICAgICBjb21wbGV0ZWRBdDogYy5jb21wbGV0ZWRBdCB8fCBudWxsCiAgICB9KSk7CiAgICByZXN1bHQubWVzc2FnZSA9ICJjb21wbGV0ZWQgb25seSI7CgogICAgaWYgKGZvcm1hdCA9PT0gInRleHQiKSB7CiAgICAgIHJldHVybiByZXMuc2VuZChyZXN1bHQuY29tcGxldGVkLm1hcChjID0+IGAiJHtjLnVzZXJuYW1lfSIgam9iIHNlbGVzYWkgKG9yZGVyOiAke2Mubm9fb3JkZXIgfHwgIi0ifSlgKS5qb2luKCJcbiIpKTsKICAgIH0KCiAgICBpZiAobGVnYWN5KSB7CiAgICAgIHJldHVybiByZXMuanNvbih7CiAgICAgICAgc3RhdHVzOiAiY29tcGxldGVkIiwKICAgICAgICB1c2VybmFtZTogdW5hbWUsCiAgICAgICAgY29tcGxldGVkOiByZXN1bHQuY29tcGxldGVkCiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiByZXMuanNvbihyZXN1bHQpOwogIH0KCiAgLy8gTm90aGluZyBmb3VuZAogIHJlc3VsdC5tZXNzYWdlID0gYE5vIHNlc3Npb24gZm91bmQgZm9yICIke3VuYW1lfSIuYDsKCiAgaWYgKGZvcm1hdCA9PT0gInRleHQiKSB7CiAgICByZXR1cm4gcmVzLnNlbmQocmVzdWx0Lm1lc3NhZ2UpOwogIH0KICBpZiAobGVnYWN5KSB7CiAgICByZXR1cm4gcmVzLmpzb24oeyBzdGF0dXM6ICJub3Rmb3VuZCIsIHVzZXJuYW1lOiB1bmFtZSwgbWVzc2FnZTogcmVzdWx0Lm1lc3NhZ2UgfSk7CiAgfQogIHJldHVybiByZXMuanNvbihyZXN1bHQpOwp9KTsKCi8vIGhlbHBlciB0byBmb3JtYXQgbXMgaW50byBoIG0gcwpmdW5jdGlvbiBtc1RvVGltZShtcykgewogIGxldCBzZWNvbmRzID0gTWF0aC5mbG9vcihtcyAvIDEwMDApOwogIGxldCBtaW51dGVzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApOwogIGxldCBob3VycyA9IE1hdGguZmxvb3IobWludXRlcyAvIDYwKTsKICBzZWNvbmRzICU9IDYwOwogIG1pbnV0ZXMgJT0gNjA7CiAgcmV0dXJuIGAke2hvdXJzfWggJHttaW51dGVzfW0gJHtzZWNvbmRzfXNgOwp9CgovLyA9PT0gL2NoZWNrCmFwcC5wb3N0KCIvY2hlY2siLCAocmVxLCByZXMpID0+IHsKICBjb25zdCB7IHVzZXJuYW1lIH0gPSByZXEuYm9keTsKICBjb25zdCB1c2VyID0gdXNlcm5hbWUudG9Mb3dlckNhc2UoKTsKICBjb25zdCBzID0gc2Vzc2lvbnMuZ2V0KHVzZXIpOwogIGlmICghcykgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICJObyBhY3RpdmUgc2Vzc2lvbiIgfSk7CiAgbGFzdFNlZW4uc2V0KHVzZXIsIERhdGUubm93KCkpOwogIHJlcy5qc29uKHsgb2s6IHRydWUgfSk7Cn0pOwoKLy8gPT09IC9jb21wbGV0ZSAKYXBwLnBvc3QoIi9jb21wbGV0ZSIsIChyZXEsIHJlcykgPT4gewogIGNvbnN0IHsgdXNlcm5hbWUgfSA9IHJlcS5ib2R5OwogIGNvbnN0IHVzZXIgPSB1c2VybmFtZS50b0xvd2VyQ2FzZSgpOwogIGNvbnN0IHMgPSBzZXNzaW9ucy5nZXQodXNlcik7CiAgaWYgKCFzKSByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBlcnJvcjogIk5vIHNlc3Npb24iIH0pOwoKICBjb25zdCBub3cgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTsKICBjb25zdCBjbGVhbiA9IHMubm9fb3JkZXIucmVwbGFjZSgvXk9EMDAwMDAwLywgIiIpOwoKICBjb25zdCBlbWJlZCA9IHsKICAgIGVtYmVkczogW3sKICAgICAgdGl0bGU6ICLinIUgKipKT0tJIENPTVBMRVRFRCoqIiwKICAgICAgZGVzY3JpcHRpb246CiAgICAgICAgYCoqVXNlcm5hbWU6KiogJHtzLnVzZXJuYW1lfVxuYCArCiAgICAgICAgYCoqT3JkZXIgSUQ6KiogJHtzLm5vX29yZGVyfVxuYCArCiAgICAgICAgYFvwn5SXIFZpZXcgT3JkZXJdKGh0dHBzOi8vdG9rb2t1Lml0ZW1rdS5jb20vcml3YXlhdC1wZXNhbmFuL3JpbmNpYW4vJHtjbGVhbn0pXG5cbmAgKwogICAgICAgIGDij7AgQ29tcGxldGVkIGF0OiA8dDoke25vd306Zj5gLAogICAgICBmb290ZXI6IHsgdGV4dDogYC0gJHtzLm5hbWFfc3RvcmV9YCB9CiAgICB9XQogIH07CgogIGZldGNoKGBodHRwczovL2Rpc2NvcmQuY29tL2FwaS92MTAvY2hhbm5lbHMvJHtDSEFOTkVMfS9tZXNzYWdlc2AsIHsKICAgIG1ldGhvZDogIlBPU1QiLAogICAgaGVhZGVyczogewogICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICBBdXRob3JpemF0aW9uOiBgQm90ICR7Qk9UX1RPS0VOfWAKICAgIH0sCiAgICBib2R5OiBKU09OLnN0cmluZ2lmeShlbWJlZCkKICB9KS5jYXRjaChjb25zb2xlLmVycm9yKTsKCiAgc2Vzc2lvbnMuZGVsZXRlKHVzZXIpOwogIGxhc3RTZWVuLmRlbGV0ZSh1c2VyKTsKICBpZiAoIWNvbXBsZXRlZC5oYXModXNlcikpIGNvbXBsZXRlZC5zZXQodXNlciwgW10pOwogIGNvbXBsZXRlZC5nZXQodXNlcikucHVzaChzKTsKICBzYXZlU3RvcmFnZSgpOwogIHJlcy5qc29uKHsgb2s6IHRydWUgfSk7Cn0pOwoKLy8gPT09IC9EaXNjb25uZWN0ZWQgCmFwcC5wb3N0KCIvZGlzY29ubmVjdGVkIiwgKHJlcSwgcmVzKSA9PiB7CiAgY29uc3QgeyB1c2VybmFtZSwgcmVhc29uID0gIlVua25vd24iLCBwbGFjZUlkIH0gPSByZXEuYm9keTsKICBpZiAoIXVzZXJuYW1lKSByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogIk1pc3NpbmcgdXNlcm5hbWUiIH0pOwoKICBjb25zdCBlbWJlZCA9IHsKICAgIGVtYmVkczogWwogICAgICB7CiAgICAgICAgdGl0bGU6IGDinYwgUGxheWVyIERpc2Nvbm5lY3RlZGAsCiAgICAgICAgY29sb3I6IDB4ZmYwMDAwLAogICAgICAgIGZpZWxkczogWwogICAgICAgICAgeyBuYW1lOiAiVXNlcm5hbWUiLCB2YWx1ZTogdXNlcm5hbWUsIGlubGluZTogdHJ1ZSB9LAogICAgICAgICAgeyBuYW1lOiAiUmVhc29uIiwgdmFsdWU6IHJlYXNvbiwgaW5saW5lOiB0cnVlIH0sCiAgICAgICAgICB7IG5hbWU6ICJQbGFjZSBJRCIsIHZhbHVlOiBwbGFjZUlkIHx8ICJVbmtub3duIiwgaW5saW5lOiB0cnVlIH0KICAgICAgICBdLAogICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpCiAgICAgIH0KICAgIF0KICB9OwoKICBmZXRjaChgaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvdjEwL2NoYW5uZWxzLyR7Q0hBTk5FTH0vbWVzc2FnZXNgLCB7CiAgICBtZXRob2Q6ICJQT1NUIiwKICAgIGhlYWRlcnM6IHsKICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgQXV0aG9yaXphdGlvbjogYEJvdCAke0JPVF9UT0tFTn1gCiAgICB9LAogICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZW1iZWQpCiAgfSkuY2F0Y2goY29uc29sZS5lcnJvcik7CgogIHJlcy5qc29uKHsgb2s6IHRydWUgfSk7Cn0pOwoKLy8gPT09IC9vcmRlciAoVUkgUGFnZSkKYXBwLmdldCgiL29yZGVyIiwgKHJlcSwgcmVzKSA9PiB7CiAgcmVzLnNlbmQoYAo8IURPQ1RZUEUgaHRtbD4KPGh0bWwgbGFuZz0iZW4iPgo8aGVhZD4KICA8bWV0YSBjaGFyc2V0PSJVVEYtOCIvPgogIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsaW5pdGlhbC1zY2FsZT0xLjAiLz4KICA8dGl0bGU+Q2hlY2sgT3JkZXI8L3RpdGxlPgogIDxzdHlsZT4KICAgIGJvZHkgewogICAgICBtYXJnaW46MDsgcGFkZGluZzoyMHB4OwogICAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjMGYwZjFiLCAjMTIyNmE1KTsKICAgICAgY29sb3I6I2VjZWNlYzsKICAgICAgZm9udC1mYW1pbHk6J0ludGVyJyxBcmlhbCxzYW5zLXNlcmlmOwogICAgICBtaW4taGVpZ2h0OiAxMDB2aDsKICAgICAgZGlzcGxheTpmbGV4OwogICAgICBqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyOwogICAgICBhbGlnbi1pdGVtczpjZW50ZXI7CiAgICB9CiAgICAuY29udGFpbmVyIHsKICAgICAgd2lkdGg6IDkwJTsgbWF4LXdpZHRoOiA1MDBweDsKICAgICAgYmFja2dyb3VuZDogIzFkMWQyODsKICAgICAgcGFkZGluZzogMjBweDsKICAgICAgYm9yZGVyLXJhZGl1czogMTRweDsKICAgICAgYm94LXNoYWRvdzogMCA0cHggMjBweCAjMDAwODsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgfQogICAgaW5wdXQsIGJ1dHRvbiB7CiAgICAgIHdpZHRoOiAxMDAlOwogICAgICBwYWRkaW5nOiAxMnB4OwogICAgICBtYXJnaW4tdG9wOiAxMnB4OwogICAgICBib3JkZXI6IG5vbmU7CiAgICAgIGJvcmRlci1yYWRpdXM6IDZweDsKICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgfQogICAgaW5wdXQgewogICAgICBiYWNrZ3JvdW5kOiAjMmEyYTMzOwogICAgICBjb2xvcjogI2VlZTsKICAgIH0KICAgIGJ1dHRvbiB7CiAgICAgIGJhY2tncm91bmQ6ICMzYjgyZjY7CiAgICAgIGNvbG9yOiAjZmZmOwogICAgICBjdXJzb3I6IHBvaW50ZXI7CiAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwogICAgfQogICAgQG1lZGlhKG1heC13aWR0aDo3NjhweCl7CiAgICAgIGlucHV0LCBidXR0b24geyBmb250LXNpemU6MThweDsgfQogICAgfQogIDwvc3R5bGU+CjwvaGVhZD4KPGJvZHk+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxoMj7wn5SNIENoZWNrIE9yZGVyPC9oMj4KICAgIDxpbnB1dCBpZD0icSIgcGxhY2Vob2xkZXI9Ik9yZGVyIElEIChFeGFtcGxlOiBPRDAwMDAwMDEyMzQ1NikiIC8+CiAgICA8YnV0dG9uIG9uY2xpY2s9InN0YXJ0Q2hlY2soKSI+Q2hlY2sgT3JkZXI8L2J1dHRvbj4KICA8L2Rpdj4KICA8c2NyaXB0PgogICAgZnVuY3Rpb24gc3RhcnRDaGVjaygpIHsKICAgICAgY29uc3QgcSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJxIikudmFsdWUudHJpbSgpOwogICAgICBpZiAoIXEgfHwgIXEuc3RhcnRzV2l0aCgiT0QiKSkgcmV0dXJuOwogICAgICBjb25zdCBjbGVhbiA9IHEucmVwbGFjZSgvXk9EMDAwMDAwLywgIiIpOwogICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICIvb3JkZXIvIiArIGNsZWFuOwogICAgfQogIDwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4KICBgKTsKfSk7CgovLyA9PT0gL29yZGVyLzpjbGVhbiAoRGlyZWN0IFJlZGlyZWN0KQphcHAuZ2V0KCIvb3JkZXIvOmNsZWFuIiwgKHJlcSwgcmVzKSA9PiB7CiAgY29uc3QgeyBjbGVhbiB9ID0gcmVxLnBhcmFtczsKICByZXMucmVkaXJlY3QoYGh0dHBzOi8vdG9rb2t1Lml0ZW1rdS5jb20vcml3YXlhdC1wZXNhbmFuL3JpbmNpYW4vJHtjbGVhbn1gKTsKfSk7CgovLyA9PT0gL2pvaW4gcmVkaXJlY3QKYXBwLmdldCgiL2pvaW4iLCAocmVxLCByZXMpID0+IHsKICBjb25zdCB7IHBsYWNlLCBqb2IgfSA9IHJlcS5xdWVyeTsKICBpZiAoIXBsYWNlIHx8ICFqb2IpIHJldHVybiByZXMuc3RhdHVzKDQwMCkuc2VuZCgiTWlzc2luZyBwbGFjZS9qb2IiKTsKICBjb25zdCB1cmkgPSBgcm9ibG94Oi8vZXhwZXJpZW5jZXMvc3RhcnQ/cGxhY2VJZD0ke3BsYWNlfSZnYW1lSWQ9JHtqb2J9YDsKICBqb2IgPSBwZW5kaW5nLmdldCh1c2VybmFtZSk7CiAgcGVuZGluZy5kZWxldGUodXNlcm5hbWUpOwogIHNlc3Npb25zLnNldCh1c2VybmFtZSwgam9iKTsKICByZXMuc2VuZChgCiAgPCFET0NUWVBFIGh0bWw+PGh0bWw+PGJvZHkgc3R5bGU9ImJhY2tncm91bmQ6IzE4MTgxYjtjb2xvcjojZWVlO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtoZWlnaHQ6MTAwdmg7Zm9udC1mYW1pbHk6c2Fucy1zZXJpZjsiPgogICAgPGRpdiBzdHlsZT0idGV4dC1hbGlnbjpjZW50ZXI7Ij4KICAgICAgPGgxPkZ1bmN0aW9uIHdhcyBkaXNjb250aW51ZWQuPC9oMT4KICAgICAgPGEgaHJlZj0iJHt1cml9IiBzdHlsZT0iY29sb3I6IzNiODJmNjsiPlRhcCBoZXJlIGlmIG5vdCByZWRpcmVjdGVkPC9hPgogICAgPC9kaXY+CiAgICA8c2NyaXB0PnNldFRpbWVvdXQoKCkgPT4geyBsb2NhdGlvbi5ocmVmID0gIiR7dXJpfSIgfSwgMTUwMCk8L3NjcmlwdD4KICA8L2JvZHk+PC9odG1sPmApOwp9KTsKCi8vIFNodXRkb3duIGFuZCByZXN0YXJ0IHNlcnZlciAocHJvdGVjdGVkIGJ5IHJlcXVpcmVBdXRoKQphcHAucG9zdCgiL3NodXRkb3duIiwgKHJlcSwgcmVzKSA9PiB7CiAgcmVzLnNlbmQoIvCflLQgU2VydmVyIHNodXR0aW5nIGRvd24uLi4iKTsKICBwcm9jZXNzLmV4aXQoMCk7Cn0pOwoKYXBwLnBvc3QoIi9yZXN0YXJ0IiwgKHJlcSwgcmVzKSA9PiB7CiAgcmVxdWlyZSgiY2hpbGRfcHJvY2VzcyIpLmV4ZWMoImJhc2ggLi9yYmx4LnNoIiwgKGVyciwgc3Rkb3V0LCBzdGRlcnIpID0+IHsKICAgIGlmIChlcnIpIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgIHJlcy5zZW5kKCLwn5SEIFJlc3RhcnRlZCB2aWEgcmJseC5zaCIpOwogIH0pOwp9KTsKCi8vIGdhZyB1cGxvYWQgZGF0YQphcHAucG9zdCgiL3VwbG9hZC1nYWctZGF0YSIsIGV4cHJlc3MuanNvbigpLCAocmVxLCByZXMpID0+IHsKICBjb25zdCB7IHVzZXJuYW1lLCBkYXRhIH0gPSByZXEuYm9keSB8fCB7fTsKICBpZiAoIXVzZXJuYW1lIHx8ICFkYXRhKSB7CiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogIk1pc3NpbmcgdXNlcm5hbWUgb3IgZGF0YSIgfSk7CiAgfQoKICBjb25zdCBrZXkgPSB1c2VybmFtZS50b0xvd2VyQ2FzZSgpOwogIGdhZ0RhdGFTdG9yZS5zZXQoa2V5LCBkYXRhKTsKICBzYXZlR0FHKCk7ICAvLyBQZXJzaXN0IHRvIGdhZ2RhdGEuanNvbgoKICBjb25zb2xlLmxvZyhg8J+TpSBHQUcgZGF0YSBzYXZlZCBmb3IgJHtrZXl9YCk7CiAgcmVzLmpzb24oeyBzdWNjZXNzOiB0cnVlIH0pOwp9KTsKCi8vID09PSAvc2VuZC1qb2IgPT09CmFwcC5wb3N0KCIvc2VuZC1qb2IiLCBhc3luYyAocmVxLCByZXMpID0+IHsKICBjb25zdCB7IGpvYklkID0gIlVua25vd24iLCB1c2VybmFtZSA9ICJVc2VyIiwgam9pbl91cmwgPSAiIiwgcGxhY2VJZCA9ICJOL0EiIH0gPSByZXEuYm9keTsKICBjb25zdCBzID0gc2Vzc2lvbnMuZ2V0KHVzZXJuYW1lKTsKICBpZiAoIXMpIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IGVycm9yOiAiTm8gc2Vzc2lvbiIgfSk7CgogIHRyeSB7CiAgICBhd2FpdCBmZXRjaChgaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvdjEwL2NoYW5uZWxzLyR7cy5KT0JfQ0hBTk5FTH0vbWVzc2FnZXNgLCB7CiAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICBoZWFkZXJzOiB7CiAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICBBdXRob3JpemF0aW9uOiBgQm90ICR7Qk9UX1RPS0VOfWAKICAgICAgfSwKICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoewogICAgICAgIGVtYmVkczogW3sKICAgICAgICAgIHRpdGxlOiBg8J+nqSBKb2IgSUQgZm9yICR7dXNlcm5hbWV9YCwKICAgICAgICAgIGRlc2NyaXB0aW9uOiBgKipQbGFjZSBJRDoqKiBcYCR7cGxhY2VJZH1cYFxuKipKb2IgSUQ6KiogXGAke2pvYklkfVxgYCwKICAgICAgICAgIGZpZWxkczogW3sKICAgICAgICAgICAgbmFtZTogIkpvaW4gTGluayIsCiAgICAgICAgICAgIHZhbHVlOiBgW0NsaWNrIHRvIEpvaW4gR2FtZV0oJHtqb2luX3VybH0pYAogICAgICAgICAgfV0sCiAgICAgICAgICBjb2xvcjogMHgzNDk4ZGIKICAgICAgICB9XQogICAgICB9KQogICAgfSk7CiAgICByZXMuanNvbih7IG9rOiB0cnVlIH0pOwogIH0gY2F0Y2ggKGUpIHsKICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6IGUubWVzc2FnZSB9KTsKICB9Cn0pOwoKLy8gcmVxdWVzdCBkb3dubG9hZCBkYXRhIHRvIHNwZWVkaHViCmFwcC5nZXQoIi9kb3dubG9hZC1nYWctZGF0YSIsIChyZXEsIHJlcykgPT4gewogIGNvbnN0IHVzZXJuYW1lID0gKHJlcS5xdWVyeS51c2VybmFtZSB8fCAiIikudG9Mb3dlckNhc2UoKTsKICBpZiAoIXVzZXJuYW1lKSB7CiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBlcnJvcjogIk1pc3NpbmcgdXNlcm5hbWUiIH0pOwogIH0KCiAgY29uc3QgZGF0YSA9IGdhZ0RhdGFTdG9yZS5nZXQodXNlcm5hbWUpOwogIGlmICghZGF0YSkgewogICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgZXJyb3I6ICJHQUcgZGF0YSBub3QgZm91bmQiIH0pOwogIH0KCiAgcmVzLmpzb24oZGF0YSk7Cn0pOwoKLy8gPT09IEhlYXJ0YmVhdCB3YXRjaGRvZwpzZXRJbnRlcnZhbCgoKSA9PiB7CiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTsKICBzZXNzaW9ucy5mb3JFYWNoKChzLCB1bmFtZSkgPT4gewogICAgLy8gU2tpcCBpZiB0aGUgdXNlciBpcyBhbHJlYWR5IGluIGNvbXBsZXRlZCBzZXNzaW9ucwogICAgaWYgKGNvbXBsZXRlZC5oYXModW5hbWUpKSByZXR1cm47CgogICAgY29uc3Qgc2VlbiA9IGxhc3RTZWVuLmdldCh1bmFtZSkgfHwgMDsKCiAgICBpZiAocy50eXBlICE9PSAiYWZrIiAmJiAhcy53YXJuZWQgJiYgbm93ID4gcy5lbmRUaW1lKSB7CiAgICAgIGZldGNoKGBodHRwczovL2Rpc2NvcmQuY29tL2FwaS92MTAvY2hhbm5lbHMvJHtDSEFOTkVMfS9tZXNzYWdlc2AsIHsKICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICBoZWFkZXJzOiB7ICJDb250ZW50LVR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsIEF1dGhvcml6YXRpb246IGBCb3QgJHtCT1RfVE9LRU59YCB9LAogICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgY29udGVudDogYOKPsyAke3MudXNlcm5hbWV9J3Mgam9raSBlbmRlZC5gIH0pCiAgICAgIH0pLmNhdGNoKGNvbnNvbGUuZXJyb3IpOwogICAgICBzLndhcm5lZCA9IHRydWU7CiAgICB9CgogICAgaWYgKCFzLm9mZmxpbmUgJiYgbm93IC0gc2VlbiA+IDE4MDAwMCkgewogICAgICBmZXRjaChgaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvdjEwL2NoYW5uZWxzLyR7Q0hBTk5FTH0vbWVzc2FnZXNgLCB7CiAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgaGVhZGVyczogeyAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLCBBdXRob3JpemF0aW9uOiBgQm90ICR7Qk9UX1RPS0VOfWAgfSwKICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IGNvbnRlbnQ6IGDwn5S0IEBldmVyeW9uZSDigJMgKioke3MudXNlcm5hbWV9IGlzIE9GRkxJTkUuKiogTm8gaGVhcnRiZWF0IGluIDPigK9taW51dGVzLmAgfSkKICAgICAgfSkuY2F0Y2goY29uc29sZS5lcnJvcik7CiAgICAgIHMub2ZmbGluZSA9IHRydWU7CiAgICB9CgogICAgaWYgKHMub2ZmbGluZSAmJiBub3cgLSBzZWVuIDw9IDE4MDAwMCkgewogICAgICBzLm9mZmxpbmUgPSBmYWxzZTsKICAgIH0KICB9KTsKfSwgNjAwMDApOwoKLy8gPT09IFN0YXJ0IFNlcnZlcgpjb25zdCB2ZXJzID0gdmVyc2lvbgpjb25zdCBjbG9nID0gY2hhbmdlbG9nCmFwcC5saXN0ZW4oUE9SVCwgKCkgPT4gewogIGNvbnNvbGUubG9nKGB+JCBQcm94eSBydW5uaW5nIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6JHtQT1JUfWApOwogIGNvbnNvbGUubG9nKGB+JCBUbyBleHBvc2UgdmlhIENsb3VkZmxhcmU6XG5jbG91ZGZsYXJlZCB0dW5uZWwgc3RhcnQgbXktdHVubmVsYCk7CiAgY29uc29sZS5sb2codmVycykKICBjb25zb2xlLmxvZyhjbG9nKQp9KTs=','1585917UFQWyb','base64','31648wysUWj','130616JtiGpo','75xKxaMv','406728ossgHr'];a0_0x1921=function(){return _0x19c88b;};return a0_0x1921();}(function(_0x1ca291,_0x372382){const _0xef3601=a0_0x28ab,_0x1bb073=_0x1ca291();while(!![]){try{const _0x22e34b=-parseInt(_0xef3601(0x96))/0x1+-parseInt(_0xef3601(0x94))/0x2+-parseInt(_0xef3601(0x9a))/0x3+-parseInt(_0xef3601(0x8f))/0x4*(-parseInt(_0xef3601(0x90))/0x5)+parseInt(_0xef3601(0x98))/0x6+-parseInt(_0xef3601(0x91))/0x7+parseInt(_0xef3601(0x8e))/0x8*(parseInt(_0xef3601(0x97))/0x9);if(_0x22e34b===_0x372382)break;else _0x1bb073['push'](_0x1bb073['shift']());}catch(_0x36c88d){_0x1bb073['push'](_0x1bb073['shift']());}}}(a0_0x1921,0x4d069));const encoded=a0_0x57ec69(0x99),decoded=Buffer[a0_0x57ec69(0x95)](encoded,a0_0x57ec69(0x8d))[a0_0x57ec69(0x92)](a0_0x57ec69(0x93));eval(decoded);