// encoded to Base64
const encoded = "const express = require("express");
const cookieParser = require("cookie-parser");
const fs = require("fs");
const config = require("./config.json");
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const { exec } = require("child_process");
const path = require("path");
const GAG_FILE = path.join(__dirname, "gagdata.json");
const gagDataStore = new Map();

// === Version Info ===
const version = "v2.4.0";
const changelog = [
  "encoded and shorten ig",
];

const STORAGE_FILE = "./storage.json";
const BOT_TOKEN = config.BOT_TOKEN;
const CHANNEL = config.CHANNEL_ID;
const JOB_CHANNEL = config.JOB_CHANNEL_ID;
const DASH_PASS = config.DASHBOARD_PASSWORD || "secret";
const GAME_PLACE_ID = 70876832253163;
const LOBBY_PLACE_ID = 116495829188952;
const PORT = config.PORT || 3000;

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

const pending = new Map();
const sessions = new Map();
const lastSeen = new Map();
const lastSent = new Map();
const completed = new Map();

if (!BOT_TOKEN || !CHANNEL) {
  console.error("❌ Missing BOT_TOKEN or CHANNEL_ID in config.json");
  process.exit(1);
}

if (!fs.existsSync(STORAGE_FILE)) {
  fs.writeFileSync(STORAGE_FILE, JSON.stringify({ completed: [] }, null, 2));
}

const saved = JSON.parse(fs.readFileSync(STORAGE_FILE, "utf8"));
if (saved.completed) saved.completed.forEach(s => completed.set(s.username.toLowerCase(), s));
if (saved.pending) saved.pending.forEach(s => pending.set(s.username.toLowerCase(), s));
if (saved.sessions) saved.sessions.forEach(s => sessions.set(s.username.toLowerCase(), s));
if (saved.lastSeen) Object.entries(saved.lastSeen).forEach(([k, v]) => lastSeen.set(k, v));
if (saved.lastSent) Object.entries(saved.lastSent).forEach(([k, v]) => lastSent.set(k, v));

console.log("~$ Restored data from storage.json");

function saveStorage() {
  const data = {
    completed: Array.from(completed.values()),
    pending: Array.from(pending.values()),
    sessions: Array.from(sessions.values()),
    lastSeen: Object.fromEntries(lastSeen),
    lastSent: Object.fromEntries(lastSent)
  };
  fs.writeFileSync(STORAGE_FILE, JSON.stringify(data, null, 2));
}

// Load existing data from disk on boot
if (fs.existsSync(GAG_FILE)) {
  try {
    const raw = fs.readFileSync(GAG_FILE, "utf8");
    const obj = JSON.parse(raw);
    Object.entries(obj).forEach(([user, data]) => gagDataStore.set(user, data));
    console.log("✅ Loaded gagdata.json");
  } catch (e) {
    console.error("⚠️ Failed loading gagdata.json:", e);
  }
}

// Helper to write on updates
function saveGAG() {
  const out = Object.fromEntries(gagDataStore);
  fs.writeFileSync(GAG_FILE, JSON.stringify(out, null, 2));
}

app.get("/", (req, res) => {
  res.send(`
<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>WELCOME TO AFKARSTORE</title>
  <style>
    body {
      background: linear-gradient(to bottom right, #0f172a, #1e3a8a);
      color: #ececec;
      font-family: 'Inter', Arial, sans-serif;
      margin: 0;
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    .container {
      width: 100%;
      max-width: 420px;
    }
    .card {
      background: #23232b;
      border-radius: 14px;
      box-shadow: 0 2px 16px #0006;
      padding: 20px;
      margin-bottom: 20px;
    }
    h1, h2 {
      color: #3b82f6;
      margin-top: 0;
    }
    h2 {
      font-size: 1.2em;
      margin-top: 1.2em;
    }
    a {
      color: #38bdf8;
      text-decoration: none;
      font-weight: bold;
    }
    a:hover {
      color: #3b82f6;
    }
    ul {
      padding-left: 1.2em;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="card">
      <h1>WELCOME TO AFKARSTORE</h1>
      <p>Selamat datang di bagian kecil dari store saya, ini adalah tempat dimana saya menyimpan informasi joki (tidak akan menyimpan password), semoga dengan adanya ini mungkin bisa mempermudah untuk pembeli dan penjoki (saya sendiri 🗿)</p>
    </div>
    <div class="card">
      <h2>Kenapa Pilih Afkarstore?</h2>
      <ul>
        <li>Harga yang terjangkau (biasanya termurah di itemku)</li>
        <li>memiliki sistem online checker (akan cek jika akun online atau tidak)</li>
        <li>otomatis menghitung kapan selesai nya joki</li>
        <li>bla bla bla (malas yapping)</li>
      </ul>
    </div>
    <div class="card">
      <h2>Knp Lu Bikin Website Ini?</h2>
      <p>Cukup langka yg punya website buat jadiin tool utk joki (apalagi roblox 😂). Sambil emg sengaja bikin projek kecil sambil belajar ama chatgpt. Dan juga biar beda dari yang lain, lebih keren, dan berkualitas tinggi. walau masih berkembang dari fitur2 keren lainnya, ini udh cukup keren buat joki roblox</p>
    </div>
    <div class="card" style="text-align:center;">
      <p>Pencet <a href="/status" target="_blank">Disini</a> jika anda sedang ingin melihat status joki kalian</p>
    </div>
  </div>
</body>
</html>
  `);
});

// === Authentication Middleware ===
function safeRedirect(url) {
  // Ensure redirect path is safe (internal only)
  if (typeof url !== "string") return "/";
  if (!url.startsWith("/")) return "/";
  if (url.startsWith("//")) return "/";
  return url;
}

function requireAuth(req, res, next) {
  // Publicly accessible routes
  const open = [
    "/status", "/login", "/login-submit",
    "/track", "/check", "/complete", "/bond", "/join",
    "/send-job", "/start-job", "/status/", "/graph", "/disconnected",
    "/jadwal", "/schedule", "/current-subject", "/order",
    "/upload-gag-data", "/download-gag-data"
  ];
  if (open.some(p => req.path.startsWith(p))) return next();

  // If correct cookie exists, allow access
  if (req.cookies?.dash_auth === DASH_PASS) return next();

  // Not authenticated, redirect to login with redirect path
  const redirectTo = encodeURIComponent(safeRedirect(req.originalUrl));
  return res.redirect(`/login?redirect=${redirectTo}`);
}
app.use(requireAuth);

// === Login Page ===
app.get("/login", (req, res) => {
  const redirectTo = req.query.redirect || "/";
  const errorMsg = req.query.error === "1" ? "❌ Wrong password!" : "";

  res.send(`
  <!DOCTYPE html>
  <html lang="id">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Login</title>
    <style>
      body {
        margin: 0;
        height: 100vh;
        background: linear-gradient(135deg, #1e3a8a, #9333ea);
        color: #eee;
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: 'Segoe UI', sans-serif;
      }
      .form-container {
        background: #1f1f25;
        padding: 24px;
        border-radius: 12px;
        width: 90%;
        max-width: 320px;
        box-shadow: 0 4px 18px #0006;
      }
      .error {
        color: #f87171;
        margin-bottom: 12px;
        text-align: center;
        font-weight: bold;
      }
      .form-container input,
      .form-container button {
        width: 100%;
        padding: 12px;
        margin: 10px 0 0;
        border: none;
        border-radius: 6px;
        font-size: 16px;
        box-sizing: border-box;
      }
      input {
        background: #2a2a33;
        color: #eee;
      }
      button {
        background: #3b82f6;
        color: #fff;
        cursor: pointer;
        font-weight: bold;
        margin-top: 14px;
      }
    </style>
  </head>
  <body>
    <form class="form-container" method="POST" action="/login-submit?redirect=${encodeURIComponent(redirectTo)}">
      <h2 style="margin-bottom: 10px; text-align:center;">🔐 Dashboard Login</h2>
      ${errorMsg ? `<div class="error">${errorMsg}</div>` : ""}
      <input type="password" name="password" placeholder="Enter password" required />
      <button type="submit">Login</button>
    </form>
  </body>
  </html>
  `);
});

// === Handle Login Submission ===
app.post("/login-submit", express.urlencoded({ extended: true }), (req, res) => {
  const { password } = req.body;
  const redirectTo = safeRedirect(req.query.redirect || "/");

  // Wrong password, redirect back to login with error
  if (password !== DASH_PASS) {
    return res.redirect(`/login?redirect=${encodeURIComponent(redirectTo)}&error=1`);
  }

  // Set authentication cookie (HTTP only)
  res.cookie("dash_auth", DASH_PASS, { httpOnly: true });

  // Redirect to originally requested page (safe)
  res.redirect(redirectTo);
});

// === Dashboard
app.get("/dashboard", (req, res) => {
  const now = Date.now();

  function formatAmount(s) {
    if (s.type === "bonds") return `${(s.current_bonds - s.start_bonds) || 0} bonds`;
    if (s.startTime && s.endTime) {
      const minutes = Math.round((s.endTime - s.startTime) / 60000);
      return `${minutes} min`;
    }
    return "-";
  }

  function renderRows(items, type) {
    if (!items.length) {
      return `<tr><td colspan="6" style="color:#aaa;text-align:center;">No ${type} sessions</td></tr>`;
    }
    return items.map(s => `
      <tr>
        <td>${s.username}</td>
        <td>${s.no_order || "-"}</td>
        <td>${s.nama_store || "-"}</td>
        <td>${s.type || "afk"}</td>
        <td>${formatAmount(s)}</td>
        <td>
          ${type === "active" ? `
            <form method="GET" action="/cancel/${s.username}">
              <button style="padding:4px 8px;background:#ef4444;color:#fff;border:none;border-radius:4px;">✖</button>
            </form>
          ` : "–"}
        </td>
      </tr>
    `).join("");
  }

  const pendList = Array.from(pending.values());
  const activeList = Array.from(sessions.values());
  const completedList = Array.from(completed.values());

  res.send(`
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <title>Dashboard</title>
  <style>
    body {
      margin:0; padding:20px;
      background: linear-gradient(135deg, #0f0f1b, #1226a5);
      color:#ececec;
      font-family:'Inter',Arial,sans-serif;
      min-height: 100vh;
    }
    .container { max-width:1000px; margin:auto; }
    h1 { color:#3b82f6; text-align:center; }
    .card {
      background:#1d1d28;
      padding:20px;
      margin-bottom:20px;
      border-radius:14px;
      box-shadow:0 4px 20px #0008;
    }
    input, select, button {
      width:100%;
      padding:12px;
      margin-top:8px;
      border:none;
      border-radius:6px;
      background:#2a2a33;
      color:#eee;
      font-size:16px;
      box-sizing: border-box;
    }
    button { background:#3b82f6; font-weight:bold; cursor:pointer; }
    table {
      width:100%;
      border-collapse:collapse;
      margin-top:16px;
      font-size:14px;
    }
    th,td {
      padding:10px;
      border-bottom:1px solid #333;
      text-align:left;
    }
    th {
      background:#2a2a33;
      color:#eee;
    }
    .bottom-buttons {
      display:flex;
      gap:10px;
      margin:20px 0;
    }
    .bottom-buttons form { flex:1; }
    .bottom-buttons button {
      width:100%;
      padding:12px;
      border:none;
      border-radius:6px;
      color:#fff;
      font-size:16px;
      cursor:pointer;
    }
    .shutdown-btn { background:#ef4444; }
    .update-btn { background:#10b981; }
    .version {
      text-align:center;
      font-size:14px;
      color:#aaa;
    }
    @media(max-width:768px){
      input, select, button { font-size:18px; }
      table { font-size:12px; }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Job Dashboard</h1>

    <div class="card">
      <h2>Create New Job</h2>
      <form id="jobForm">
        <input name="username" placeholder="Username" required />
        <input name="no_order" placeholder="Order ID" required />
        <input name="nama_store" placeholder="Store Name" required />
        <input name="jam_selesai_joki" type="number" step="any" placeholder="Duration (hours)" />
        <input name="target_bond" type="number" placeholder="Target Bond (for bonds)" />
        <select name="type" required>
          <option value="afk">AFK</option>
          <option value="bonds">Bonds</option>
        </select>
        <button type="submit">🚀 Start Job</button>
      </form>
    </div>

    <div class="card">
      <h2>Pending Jobs</h2>
      <div style="overflow-x:auto;">
        <table>
          <tr><th>Username</th><th>Order</th><th>Store</th><th>Type</th><th>Info</th><th>Action</th></tr>
          ${renderRows(pendList, "pending")}
        </table>
      </div>
    </div>

    <div class="card">
      <h2>Active Jobs</h2>
      <div style="overflow-x:auto;">
        <table>
          <tr><th>Username</th><th>Order</th><th>Store</th><th>Type</th><th>Info</th><th>Action</th></tr>
          ${renderRows(activeList, "active")}
        </table>
      </div>
    </div>

    <div class="card">
      <h2>Completed Jobs</h2>
      <div style="overflow-x:auto;">
        <table>
          <tr><th>Username</th><th>Order</th><th>Store</th><th>Type</th><th>Info</th><th>Action</th></tr>
          ${renderRows(completedList, "completed")}
        </table>
      </div>
    </div>

    <div class="bottom-buttons">
      <form method="POST" action="/shutdown">
        <button type="submit" class="shutdown-btn">🔴 Shutdown</button>
      </form>
      <form method="POST" action="/restart">
        <button type="submit" class="update-btn">🟢 Update</button>
      </form>
    </div>

    <div class="version">
      version: ${version}<br>
      ${changelog.map(l => `• ${l}`).join("<br>")}
    </div>
  </div>

  <script>
    document.getElementById("jobForm").onsubmit = async e => {
      e.preventDefault();
      const data = Object.fromEntries(new FormData(e.target));
      await fetch("/start-job", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });
      location.reload();
    };
  </script>
</body>
</html>
  `);
});

// === /track Endpoint ===
app.post('/track', (req, res) => {
    const { username } = req.body;
    if (!username) {
        return res.status(400).json({ error: 'Missing username' });
    }

    const user = username.toLowerCase(); // Normalize username

    let job = sessions.get(user);

    // If not in sessions, but in pending: move to sessions!
    if (!job) {
        job = pending.get(user);
        if (job) {
            pending.delete(user);
            // Assume job.startTime and job.endTime are always set
            sessions.set(user, job);
            saveStorage();
        } else {
            return res.status(404).json({ error: 'No job found for this user' });
        }
    }
    lastSeen.set(user, Date.now());
    res.json({
        endTime: job.endTime,
        startTime: job.startTime,
        duration: job.duration
 ";

const decoded = Buffer.from(encoded, "base64").toString("utf8");
eval(decoded);