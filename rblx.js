// encoded to Base64
const encoded = "";

const decoded = Buffer.from(encoded, "base64").toString("utf8");
eval(decoded);